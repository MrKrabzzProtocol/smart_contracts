{
  "address": "0x698F44D5e14E51a23772C9c1CEC41B837FD08983",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasReceiver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_tellorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_krabzTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FILECOIN_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TICKET_PER_ROUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLYGON_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREDICTABLE_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_selectedNumbers",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool",
          "name": "_nativeAsset",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmountOne",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTicketPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmountOne",
          "type": "uint256"
        }
      ],
      "name": "claimRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmountOne",
          "type": "uint256"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimWinningsPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filecoinChain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filecoinDestinationAddr",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasService",
      "outputs": [
        {
          "internalType": "contract IAxelarGasService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_assetName",
          "type": "string"
        }
      ],
      "name": "getAssetPriceUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "roundName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketsPurchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256[3]",
              "name": "roundWinningNumbers",
              "type": "uint256[3]"
            },
            {
              "internalType": "bool",
              "name": "roundState",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fil",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "matic",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "krabz",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MrKrabz.CrossChainBalance",
              "name": "balance",
              "type": "tuple"
            }
          ],
          "internalType": "struct MrKrabz.Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDataAfter",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDataBefore",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIndexForDataAfter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_found",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIndexForDataBefore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_found",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "getMultipleValuesBefore",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "_values",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_timestamps",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        }
      ],
      "name": "getNewValueCountbyQueryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getReporterByTimestamp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundPoolBalanceUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTicketsPurchasedPerRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyQueryIdandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRoundWinners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalTicketsPurchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalWinnings",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "fil",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "matic",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "krabz",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MrKrabz.CrossChainBalance",
              "name": "balance",
              "type": "tuple"
            }
          ],
          "internalType": "struct MrKrabz.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTicketsForCurrentRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ID",
              "type": "uint256"
            },
            {
              "internalType": "uint256[3]",
              "name": "selectedNumbers",
              "type": "uint256[3]"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "originChain",
              "type": "uint256"
            }
          ],
          "internalType": "struct MrKrabz.Ticket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idMappingContract",
      "outputs": [
        {
          "internalType": "contract IMappingContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketId",
          "type": "uint256"
        }
      ],
      "name": "isWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "krabzTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newRoundPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonChain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonDestinationAddr",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIdToRoundDetails_",
      "outputs": [
        {
          "internalType": "string",
          "name": "roundName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketsPurchased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "roundState",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fil",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "matic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "krabz",
              "type": "uint256"
            }
          ],
          "internalType": "struct MrKrabz.CrossChainBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIdToTicketList_",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withdrawn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "originChain",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundToticketId_",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withdrawn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "originChain",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addy",
          "type": "address"
        }
      ],
      "name": "setIdMappingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setRandomWinnersPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonceOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonceTwo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonceThree",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmountOne",
          "type": "uint256"
        }
      ],
      "name": "setRoundWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPriceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_roundName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmountOne",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tellor",
      "outputs": [
        {
          "internalType": "contract ITellor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ticketsPurchasedPerRound_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_nativeAsset",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmountOne",
          "type": "uint256"
        }
      ],
      "name": "topUpWalletBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topUpWalletPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_filDestinationAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_polygonDestinationAddress",
          "type": "string"
        }
      ],
      "name": "updateDestinationAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDetails_",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTicketsPurchased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fil",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "matic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "krabz",
              "type": "uint256"
            }
          ],
          "internalType": "struct MrKrabz.CrossChainBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "valueFor",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_value",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimateGasAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFromWalletPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawNativeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe6266d2782995002138c29c7e4f2635921a561dd37c3d128ed7cdbe87daa77b2",
  "receipt": {
    "to": null,
    "from": "0x5F7FbE4bf8987FA77Ec6C22FD3f3d558B3b68D4e",
    "contractAddress": "0x698F44D5e14E51a23772C9c1CEC41B837FD08983",
    "transactionIndex": 3,
    "gasUsed": "5656449",
    "logsBloom": "0x
    "blockHash": "0x000db758adb6e8cc2197b7952e2adbf01604a45182b6a5b2a5411ad20b591554",
    "transactionHash": "0xe6266d2782995002138c29c7e4f2635921a561dd37c3d128ed7cdbe87daa77b2",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 35956977,
        "transactionHash": "0xe6266d2782995002138c29c7e4f2635921a561dd37c3d128ed7cdbe87daa77b2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f7fbe4bf8987fa77ec6c22fd3f3d558b3b68d4e",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000052647e16f1416f0000000000000000000000000000000000000000000000001764398adf80b1c9000000000000000000000000000000000000000000000e79edf4ddbb28c15d6b0000000000000000000000000000000000000000000000001711d50cc88f705a000000000000000000000000000000000000000000000e79ee4742393fb29eda",
        "logIndex": 23,
        "blockHash": "0x000db758adb6e8cc2197b7952e2adbf01604a45182b6a5b2a5411ad20b591554"
      }
    ],
    "blockNumber": 35956977,
    "cumulativeGasUsed": "6168895",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBF62ef1486468a6bd26Dd669C06db43dEd5B849B",
    "0xbE406F0189A0B4cf3A05C286473D23791Dd44Cc6",
    "0xD9157453E2668B2fc45b7A803D3FEF3642430cC0",
    "0x1553085A00672599F87BbFb63082Faf240Ab6483"
  ],
  "numDeployments": 15,
  "solcInputHash": "55b49ed094715c959a3fd1a65a4d4f1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tellorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_krabzTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FILECOIN_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TICKET_PER_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLYGON_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICTABLE_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_selectedNumbers\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"_nativeAsset\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmountOne\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicketPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmountOne\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmountOne\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWinningsPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filecoinChain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filecoinDestinationAddr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasService\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetName\",\"type\":\"string\"}],\"name\":\"getAssetPriceUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"roundName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"roundWinningNumbers\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"roundState\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"krabz\",\"type\":\"uint256\"}],\"internalType\":\"struct MrKrabz.CrossChainBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"internalType\":\"struct MrKrabz.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDataAfter\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDataBefore\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIndexForDataAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_found\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIndexForDataBefore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_found\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"getMultipleValuesBefore\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_values\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getNewValueCountbyQueryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getReporterByTimestamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundPoolBalanceUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTicketsPurchasedPerRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyQueryIdandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRoundWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTicketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"krabz\",\"type\":\"uint256\"}],\"internalType\":\"struct MrKrabz.CrossChainBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"internalType\":\"struct MrKrabz.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTicketsForCurrentRound\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"selectedNumbers\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"}],\"internalType\":\"struct MrKrabz.Ticket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idMappingContract\",\"outputs\":[{\"internalType\":\"contract IMappingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"krabzTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newRoundPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonChain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonDestinationAddr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIdToRoundDetails_\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"roundName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundState\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"krabz\",\"type\":\"uint256\"}],\"internalType\":\"struct MrKrabz.CrossChainBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIdToTicketList_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundToticketId_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"setIdMappingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRandomWinnersPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonceOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonceTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonceThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmountOne\",\"type\":\"uint256\"}],\"name\":\"setRoundWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_roundName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmountOne\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"internalType\":\"contract ITellor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsPurchasedPerRound_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_nativeAsset\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmountOne\",\"type\":\"uint256\"}],\"name\":\"topUpWalletBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUpWalletPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_filDestinationAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_polygonDestinationAddress\",\"type\":\"string\"}],\"name\":\"updateDestinationAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDetails_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTicketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"krabz\",\"type\":\"uint256\"}],\"internalType\":\"struct MrKrabz.CrossChainBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"valueFor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_value\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimateGasAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromWalletPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDataAfter(bytes32,uint256)\":{\"details\":\"Retrieves the next value for the queryId after the specified timestamp\",\"params\":{\"_queryId\":\"is the queryId to look up the value for\",\"_timestamp\":\"after which to search for next value\"},\"returns\":{\"_timestampRetrieved\":\"the value's timestamp\",\"_value\":\"the value retrieved\"}},\"getDataBefore(bytes32,uint256)\":{\"details\":\"Retrieves the latest value for the queryId before the specified timestamp\",\"params\":{\"_queryId\":\"is the queryId to look up the value for\",\"_timestamp\":\"before which to search for latest value\"},\"returns\":{\"_timestampRetrieved\":\"the value's timestamp\",\"_value\":\"the value retrieved\"}},\"getIndexForDataAfter(bytes32,uint256)\":{\"details\":\"Retrieves latest array index of data before the specified timestamp for the queryId\",\"params\":{\"_queryId\":\"is the queryId to look up the index for\",\"_timestamp\":\"is the timestamp before which to search for the latest index\"},\"returns\":{\"_found\":\"whether the index was found\",\"_index\":\"the latest index found before the specified timestamp\"}},\"getIndexForDataBefore(bytes32,uint256)\":{\"details\":\"Retrieves latest array index of data before the specified timestamp for the queryId\",\"params\":{\"_queryId\":\"is the queryId to look up the index for\",\"_timestamp\":\"is the timestamp before which to search for the latest index\"},\"returns\":{\"_found\":\"whether the index was found\",\"_index\":\"the latest index found before the specified timestamp\"}},\"getMultipleValuesBefore(bytes32,uint256,uint256,uint256)\":{\"details\":\"Retrieves multiple uint256 values before the specified timestamp\",\"params\":{\"_maxAge\":\"the maximum number of seconds before the _timestamp to search for values\",\"_maxCount\":\"the maximum number of values to return\",\"_queryId\":\"the unique id of the data query\",\"_timestamp\":\"the timestamp before which to search for values\"},\"returns\":{\"_timestamps\":\"the timestamps of the values retrieved\",\"_values\":\"the values retrieved, ordered from oldest to newest\"}},\"getNewValueCountbyQueryId(bytes32)\":{\"details\":\"Counts the number of values that have been submitted for the queryId\",\"params\":{\"_queryId\":\"the id to look up\"},\"returns\":{\"_0\":\"uint256 count of the number of values received for the queryId\"}},\"getReporterByTimestamp(bytes32,uint256)\":{\"details\":\"Returns the address of the reporter who submitted a value for a data ID at a specific time\",\"params\":{\"_queryId\":\"is ID of the specific data feed\",\"_timestamp\":\"is the timestamp to find a corresponding reporter for\"},\"returns\":{\"_0\":\"address of the reporter who reported the value for the data ID at the given timestamp\"}},\"getTimestampbyQueryIdandIndex(bytes32,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_queryId\":\"is the id to look up\"},\"returns\":{\"_0\":\"uint256 timestamp\"}},\"isInDispute(bytes32,uint256)\":{\"details\":\"Determines whether a value with a given queryId and timestamp has been disputed\",\"params\":{\"_queryId\":\"is the value id to look up\",\"_timestamp\":\"is the timestamp of the value to look up\"},\"returns\":{\"_0\":\"bool true if queryId/timestamp is under dispute\"}},\"retrieveData(bytes32,uint256)\":{\"details\":\"Retrieve value from oracle based on queryId/timestamp\",\"params\":{\"_queryId\":\"being requested\",\"_timestamp\":\"to retrieve data/value from\"},\"returns\":{\"_0\":\"bytes value for query/timestamp submitted\"}},\"setIdMappingContract(address)\":{\"details\":\"allows dev to set mapping contract for valueFor (EIP2362)\",\"params\":{\"_addy\":\"address of mapping contract\"}},\"valueFor(bytes32)\":{\"details\":\"Retrieve most recent int256 value from oracle based on queryId\",\"params\":{\"_id\":\"being requested\"},\"returns\":{\"_statusCode\":\"200 if value found, 404 if not found\",\"_timestamp\":\"timestamp of most recent value\",\"_value\":\"most recent value submitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MrKrabz.sol\":\"MrKrabz\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\ncontract AxelarExecutable is IAxelarExecutable {\\n    IAxelarGateway public immutable gateway;\\n\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gateway = IAxelarGateway(gateway_);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (\\n            !gateway.validateContractCallAndMint(\\n                commandId,\\n                sourceChain,\\n                sourceAddress,\\n                payloadHash,\\n                tokenSymbol,\\n                amount\\n            )\\n        ) revert NotApprovedByGateway();\\n\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n    }\\n\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x2a88d046f9cdc664afc7b788d6c5b534d361b46fb45ab7abf721a58dd813359b\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4279ef3b4fe5e7082f39c665d4aeddc6d84fcc6fadaacd1d8ae604ba6146b8e6\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n    error NothingReceived();\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function gasCollector() external returns (address);\\n}\\n\",\"keccak256\":\"0xafab7fde3204bedcb81109a275dfb12f8999d190f0532e37d7e8c0f31dbf41de\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0xae3d4598622e927639e3cba383618476562631bc8afafe68b16dfbd1db21fd78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/MrKrabz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// OPENZEPPLIN\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// AXELAR\\nimport {AxelarExecutable} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\\\";\\nimport {IAxelarGateway} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\n\\n// TELLOR\\nimport \\\"usingtellor/contracts/UsingTellor.sol\\\";\\n\\ncontract MrKrabz is UsingTellor, AxelarExecutable {\\n    ////// CONTRACTS ////\\n    // axelar gas service\\n    IAxelarGasService public immutable gasService;\\n\\n    ///// STRUCT's //////\\n\\n    // round multi chain balance\\n    struct CrossChainBalance {\\n        uint256 fil;\\n        uint256 matic;\\n        uint256 krabz;\\n    }\\n\\n    // ticket struct\\n    struct Ticket {\\n        address owner;\\n        uint256 ID;\\n        uint256[3] selectedNumbers;\\n        bool withdrawn;\\n        uint256 originChain;\\n    }\\n\\n    // round struct\\n    struct Round {\\n        string roundName;\\n        uint256 roundId;\\n        uint256 ticketsPurchased;\\n        uint256 roundEndTime;\\n        uint256 ticketPrice;\\n        uint256[3] roundWinningNumbers;\\n        bool roundState; // true = winners decided ? false = anyone can participate\\n        CrossChainBalance balance;\\n    }\\n\\n    // user struct\\n    struct User {\\n        address user;\\n        uint256 totalTicketsPurchased;\\n        uint256 totalWinnings;\\n        CrossChainBalance balance;\\n    }\\n\\n    ////// ADDRESSES /////\\n\\n    address public krabzTokenAddress;\\n\\n    address public deployer;\\n\\n    ///// UINT256's //////\\n\\n    // chain ids (TESTNET)\\n    uint256 public FILECOIN_CHAIN_ID = 3141;\\n    uint256 public POLYGON_CHAIN_ID = 80001;\\n\\n    // execution path handlers\\n    uint256 public topUpWalletPath = 1;\\n    uint256 public buyTicketPath = 2;\\n    uint256 public newRoundPath = 3;\\n    uint256 public setRandomWinnersPath = 4;\\n    uint256 public claimWinningsPath = 5;\\n    uint256 public withdrawFromWalletPath = 6;\\n\\n    // current round id\\n    uint256 public currentRound;\\n\\n    // max ticket per round\\n    uint256 public MAX_TICKET_PER_ROUND = 3;\\n\\n    // predicatble val\\n    uint256 public PREDICTABLE_VALUE = 12983786;\\n\\n    //// STRINGS ////\\n\\n    // chain names\\n    string public filecoinChain = \\\"filecoin\\\";\\n    string public polygonChain = \\\"Polygon\\\";\\n\\n    // destination address\\n    string public filecoinDestinationAddr;\\n    string public polygonDestinationAddr;\\n\\n    ///// MAPPING's /////\\n\\n    // user address to user struct\\n    mapping(address => User) public userDetails_;\\n\\n    // round to ticket id to ticket\\n    mapping(uint256 => mapping(uint256 => Ticket)) public roundToticketId_;\\n\\n    // round id to round struct\\n    mapping(uint256 => Round) public roundIdToRoundDetails_;\\n\\n    // tickets purcahsed per round\\n    mapping(uint256 => mapping(address => uint256)) public ticketsPurchasedPerRound_;\\n\\n    // round to tickets purchased\\n    mapping(uint256 => Ticket[]) public roundIdToTicketList_;\\n\\n    //  CONSTRUCTOR\\n    constructor(\\n        address _gateway,\\n        address _gasReceiver,\\n        address payable _tellorAddress,\\n        address _krabzTokenAddress\\n    ) UsingTellor(_tellorAddress) AxelarExecutable(_gateway) {\\n        // gas service\\n        gasService = IAxelarGasService(_gasReceiver);\\n\\n        // krabz token address\\n        krabzTokenAddress = _krabzTokenAddress;\\n\\n        // deployer\\n        deployer = msg.sender;\\n    }\\n\\n    ///// MAIN CONTRACT FUNCTIONS //////\\n\\n    // top up wallet balance\\n    function topUpWalletBalance(\\n        uint256 _amount,\\n        bool _nativeAsset,\\n        uint256 _estimateGasAmountOne\\n    ) public payable {\\n        // decide amount\\n        uint256 amount;\\n        if (_nativeAsset) amount = msg.value;\\n        else {\\n            amount = _amount;\\n            // transfer krabz token\\n            IERC20(krabzTokenAddress).transferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        // make the cross chain call\\n        _handleTopUpWalletBalanceCrossChain(\\n            amount,\\n            _nativeAsset,\\n            msg.sender,\\n            _estimateGasAmountOne\\n        );\\n    }\\n\\n    // buy ticket\\n    function buyTicket(\\n        uint256[3] memory _selectedNumbers,\\n        bool _nativeAsset,\\n        uint256 _estimateGasAmountOne\\n    ) public {\\n        // has the end time for the round passed ?\\n        uint256 roundEndTime = roundIdToRoundDetails_[currentRound].roundEndTime;\\n        if (block.timestamp > roundEndTime) revert(\\\"Round Passed!\\\");\\n\\n        // round entry state passed: currently in deciding winners state\\n        if (roundIdToRoundDetails_[currentRound].roundState) revert(\\\"Entry Closed\\\");\\n\\n        // check each number selection\\n        for (uint i = 0; i < _selectedNumbers.length; i++) {\\n            if (_selectedNumbers[i] > 30) revert(\\\"Num > 30\\\");\\n        }\\n\\n        // check if the amount sent or approved is valid for the ticket purchase\\n        uint256 requiredAsset;\\n        uint256 roundTicketPrice = roundIdToRoundDetails_[currentRound].ticketPrice;\\n\\n        if (_nativeAsset) {\\n            if (block.chainid == FILECOIN_CHAIN_ID) {\\n                requiredAsset = (roundTicketPrice * 10 ** 18) / getAssetPriceUsd(\\\"fil\\\");\\n                // low wallet balance\\n                require(userDetails_[msg.sender].balance.fil >= requiredAsset, \\\"Low Bal\\\");\\n\\n                // deduct from users wallet balance\\n                userDetails_[msg.sender].balance.fil -= requiredAsset;\\n\\n                // update the lotto corss chain balance\\n                roundIdToRoundDetails_[currentRound].balance.fil += requiredAsset;\\n            }\\n\\n            if (block.chainid == POLYGON_CHAIN_ID) {\\n                requiredAsset = (roundTicketPrice * 10 ** 18) / getAssetPriceUsd(\\\"matic\\\");\\n                require(\\n                    userDetails_[msg.sender].balance.matic >= requiredAsset,\\n                    \\\"Insufficient Wallet Balance\\\"\\n                );\\n\\n                // deduct from users wallet balance\\n                userDetails_[msg.sender].balance.matic -= requiredAsset;\\n\\n                // update the lotto corss chain balance\\n                roundIdToRoundDetails_[currentRound].balance.matic += requiredAsset;\\n            }\\n        } else {\\n            requiredAsset = (roundTicketPrice * 10 ** 18) / getAssetPriceUsd(\\\"badger\\\");\\n            require(\\n                userDetails_[msg.sender].balance.krabz >= requiredAsset,\\n                \\\"Insufficient Wallet Balance\\\"\\n            );\\n\\n            // deduct from users wallet balance\\n            userDetails_[msg.sender].balance.krabz -= requiredAsset;\\n\\n            // update the lotto corss chain balance\\n            roundIdToRoundDetails_[currentRound].balance.krabz += requiredAsset;\\n        }\\n\\n        // if user has bought more than 3 tickets stop em\\n        if (ticketsPurchasedPerRound_[currentRound][msg.sender] >= MAX_TICKET_PER_ROUND)\\n            revert(\\\"Max Tickets\\\");\\n\\n        // increment round participations => no of tickets purchased\\n        uint256 ticketId = roundIdToRoundDetails_[currentRound].ticketsPurchased += 1;\\n\\n        // update ticket details\\n        roundToticketId_[currentRound][ticketId] = Ticket({\\n            owner: msg.sender,\\n            ID: ticketId,\\n            selectedNumbers: _selectedNumbers,\\n            withdrawn: false,\\n            originChain: block.chainid\\n        });\\n\\n        // update total number of tickets purchased by a user since joining mrkrabz\\n        userDetails_[msg.sender].totalTicketsPurchased += 1;\\n\\n        // update the list of tickets\\n        roundIdToTicketList_[currentRound].push(roundToticketId_[currentRound][ticketId]);\\n\\n        // tickets purchased by round for user\\n        ticketsPurchasedPerRound_[currentRound][msg.sender] += 1;\\n\\n        // handle buy ticket across chains\\n        _handleBuyTicketCrossChain(\\n            ticketId,\\n            msg.sender,\\n            _selectedNumbers,\\n            block.chainid,\\n            _nativeAsset,\\n            requiredAsset,\\n            currentRound,\\n            roundToticketId_[currentRound][ticketId],\\n            _estimateGasAmountOne\\n        );\\n    }\\n\\n    // claim winnings\\n    function claimWinnings(uint256 _ticketId, uint256 _estimateGasAmountOne) public {\\n        // the round state must be over\\n        if (!roundIdToRoundDetails_[currentRound].roundState) revert(\\\"Round On\\\");\\n\\n        // must withdraw ticket from origin chain\\n        if (roundToticketId_[currentRound][_ticketId].originChain != block.chainid)\\n            revert(\\\"! Origin Chain\\\");\\n\\n        // must be the owner of the ticket\\n        if (roundToticketId_[currentRound][_ticketId].owner != msg.sender) revert(\\\"! Ticket Owner\\\");\\n\\n        // check if the withdrawn state for the ticket is true\\n        if (roundToticketId_[currentRound][_ticketId].withdrawn) revert(\\\"Claimed\\\");\\n\\n        // check if the ticket is a winning ticket\\n        bool isTicketWinner = isWinner(_ticketId);\\n        require(isTicketWinner, \\\"! Winner\\\");\\n\\n        // get the total number of winners\\n        uint256 totalWinners = getTotalRoundWinners();\\n\\n        // get the total pool balance is in usd\\n        uint256 roundPoolBalanceInUsd = getRoundPoolBalanceUsd();\\n\\n        // get individual winner amount in usd\\n        uint256 individualWinnerAmount = roundPoolBalanceInUsd / totalWinners;\\n\\n        // get individual winner amount in krabz\\n        uint256 individualWinnerAmountInKrabz = (individualWinnerAmount * 10 ** 18) /\\n            getAssetPriceUsd(\\\"badger\\\");\\n\\n        // update users krabz balance\\n        userDetails_[msg.sender].balance.krabz += individualWinnerAmountInKrabz;\\n        // update winning count\\n        userDetails_[msg.sender].totalWinnings += 1;\\n\\n        // update ticket withdrawal state\\n        roundToticketId_[currentRound][_ticketId].withdrawn = true;\\n\\n        // update the balance cross chain\\n        _handleClaimWinningsCrossChain(\\n            individualWinnerAmountInKrabz,\\n            msg.sender,\\n            _estimateGasAmountOne\\n        );\\n    }\\n\\n    // claim funds\\n    function claimRefund(uint256 _ticketId, uint256 _estimateGasAmountOne) public {\\n        // the round state must be over\\n        if (!roundIdToRoundDetails_[currentRound].roundState) revert(\\\"Round On\\\");\\n\\n        // must withdraw ticket from origin chain\\n        if (roundToticketId_[currentRound][_ticketId].originChain != block.chainid)\\n            revert(\\\"! Origin Chain\\\");\\n\\n        // must be the owner of the ticket\\n        if (roundToticketId_[currentRound][_ticketId].owner != msg.sender) revert(\\\"! Ticket Owner\\\");\\n\\n        // check if the withdrawn state for the ticket is true\\n        if (roundToticketId_[currentRound][_ticketId].withdrawn) revert(\\\"Ticket Claimed\\\");\\n\\n        // check if the ticket is a winning ticket\\n        bool isTicketWinner = isWinner(_ticketId);\\n        require(!isTicketWinner, \\\"Winner\\\");\\n\\n        uint256 ticketPriceInUsd = roundIdToRoundDetails_[currentRound].ticketPrice;\\n\\n        // get individual winner amount in krabz\\n        uint256 individualRefundAmountInKrabz = (ticketPriceInUsd * 10 ** 18) /\\n            getAssetPriceUsd(\\\"badger\\\");\\n\\n        // update users krabz balance\\n        userDetails_[msg.sender].balance.krabz += (individualRefundAmountInKrabz * 30) / 100;\\n\\n        // update ticket withdrawal state\\n        roundToticketId_[currentRound][_ticketId].withdrawn = true;\\n\\n        // update the balance cross chain\\n        _handleTopUpWalletBalanceCrossChain(\\n            (individualRefundAmountInKrabz * 30) / 100,\\n            false,\\n            msg.sender,\\n            _estimateGasAmountOne\\n        );\\n    }\\n\\n    // ADMIN FUNCTIONS (TO BE LATER HANDLED BY CHAINLINK AUTOMATION)\\n\\n    // start new round\\n    function startNewRound(\\n        uint256 _roundEndTime,\\n        uint256 _ticketPriceInUsd,\\n        string memory _roundName,\\n        uint256 _estimateGasAmountOne\\n    ) public {\\n        // special caller check\\n        require(msg.sender == deployer, \\\"!Special Caller\\\");\\n\\n        if (block.timestamp < roundIdToRoundDetails_[currentRound].roundEndTime) revert(\\\"Round On\\\");\\n\\n        // set the current round\\n        currentRound += 1;\\n\\n        // update the round details\\n        roundIdToRoundDetails_[currentRound].roundId = currentRound;\\n        roundIdToRoundDetails_[currentRound].ticketPrice = _ticketPriceInUsd;\\n        roundIdToRoundDetails_[currentRound].roundEndTime = block.timestamp + _roundEndTime;\\n        roundIdToRoundDetails_[currentRound].roundName = _roundName;\\n\\n        _handleStartNewRoundCrossChain(\\n            currentRound,\\n            _roundEndTime + block.timestamp,\\n            _ticketPriceInUsd,\\n            _roundName,\\n            _estimateGasAmountOne\\n        );\\n    }\\n\\n    // set round winner\\n    function setRoundWinners(\\n        uint256 _nonceOne,\\n        uint256 _nonceTwo,\\n        uint256 _nonceThree,\\n        uint256 _estimateGasAmountOne\\n    ) public {\\n        // special caller check\\n        require(msg.sender == deployer, \\\"!Admin\\\");\\n\\n        // makes sure the winners for the round hasnt already been announced\\n        if (roundIdToRoundDetails_[currentRound].roundState) revert(\\\"Announced\\\");\\n\\n        // check that the round end time has passed\\n        if (block.timestamp < roundIdToRoundDetails_[currentRound].roundEndTime) revert(\\\"Round On\\\");\\n\\n        // you can only set the winners from the fvm chain\\n        if (block.chainid != FILECOIN_CHAIN_ID) revert(\\\"!FVM\\\");\\n\\n        //  Intentionally setting the random number to a predictable value:\\n        // 1. For testing\\n        // 2. Lack of chainlink VRF on FVM as of time of writing\\n        uint256 randomNumberOne = uint256(\\n            keccak256(abi.encodePacked(PREDICTABLE_VALUE, msg.sender, _nonceOne))\\n        ) % 30;\\n\\n        uint256 randomNumberTwo = uint256(\\n            keccak256(abi.encodePacked(PREDICTABLE_VALUE, msg.sender, _nonceTwo))\\n        ) % 30;\\n\\n        uint256 randomNumberThree = uint256(\\n            keccak256(abi.encodePacked(PREDICTABLE_VALUE, msg.sender, _nonceThree))\\n        ) % 30;\\n\\n        // update round details\\n        roundIdToRoundDetails_[currentRound].roundState = true;\\n        roundIdToRoundDetails_[currentRound].roundWinningNumbers = [\\n            randomNumberOne,\\n            randomNumberTwo,\\n            randomNumberThree\\n        ];\\n\\n        _handleSetRandomWinnersCrossChain(\\n            currentRound,\\n            [randomNumberOne, randomNumberTwo, randomNumberThree],\\n            _estimateGasAmountOne\\n        );\\n    }\\n\\n    ////// CROSS CHAIN HELPER FUNCTIONS /////\\n\\n    function _handleBuyTicketCrossChain(\\n        uint256 _ticketId,\\n        address _user,\\n        uint256[3] memory _selectedNumbers,\\n        uint256 _originChainId,\\n        bool _nativeAsset,\\n        uint256 _requiredAsset,\\n        uint256 _currentRoundId,\\n        Ticket memory _ticket,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        // inner payload\\n        bytes memory innerPayload = abi.encode(\\n            _ticketId,\\n            _user,\\n            _selectedNumbers,\\n            _originChainId,\\n            _nativeAsset,\\n            _requiredAsset,\\n            _currentRoundId,\\n            _ticket\\n        );\\n\\n        // main payload\\n        bytes memory payload = abi.encode(buyTicketPath, innerPayload);\\n\\n        if (block.chainid == FILECOIN_CHAIN_ID) {\\n            _sendPayloadFromFilecoin(payload, _estimateGasAmountOne);\\n        }\\n\\n        if (block.chainid == POLYGON_CHAIN_ID) {\\n            _sendPayloadFromPolygon(payload, _estimateGasAmountOne);\\n        }\\n    }\\n\\n    // handle start new round cross chain\\n    function _handleStartNewRoundCrossChain(\\n        uint256 _currentRound,\\n        uint256 _roundEndTime,\\n        uint256 _ticketPriceInUsd,\\n        string memory _roundName,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        // inner payload\\n        bytes memory innerPayload = abi.encode(\\n            _currentRound,\\n            _roundEndTime,\\n            _ticketPriceInUsd,\\n            _roundName\\n        );\\n\\n        // payload\\n        bytes memory payload = abi.encode(newRoundPath, innerPayload);\\n\\n        if (block.chainid == FILECOIN_CHAIN_ID)\\n            _sendPayloadFromFilecoin(payload, _estimateGasAmountOne);\\n\\n        if (block.chainid == POLYGON_CHAIN_ID)\\n            _sendPayloadFromPolygon(payload, _estimateGasAmountOne);\\n    }\\n\\n    // handle top up wallet balance cross chain\\n    function _handleTopUpWalletBalanceCrossChain(\\n        uint256 _amount,\\n        bool _nativeAsset,\\n        address _user,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        if (block.chainid == FILECOIN_CHAIN_ID) {\\n            // if native asset is true. pay with it. else use krabz token\\n            if (_nativeAsset) userDetails_[_user].balance.fil += _amount;\\n            else userDetails_[_user].balance.krabz += _amount;\\n\\n            // inner payload\\n            bytes memory innerPayload = abi.encode(FILECOIN_CHAIN_ID, _nativeAsset, _amount, _user);\\n\\n            // main payload\\n            bytes memory payload = abi.encode(topUpWalletPath, innerPayload);\\n\\n            _sendPayloadFromFilecoin(payload, _estimateGasAmountOne);\\n        }\\n\\n        if (block.chainid == POLYGON_CHAIN_ID) {\\n            // if native asset is true. pay with it. else use krabz token\\n            if (_nativeAsset) userDetails_[_user].balance.matic += _amount;\\n            else userDetails_[_user].balance.krabz += _amount;\\n\\n            // inner payload\\n            bytes memory innerPayload = abi.encode(FILECOIN_CHAIN_ID, _nativeAsset, _amount, _user);\\n\\n            // main payload\\n            bytes memory payload = abi.encode(topUpWalletPath, innerPayload);\\n\\n            _sendPayloadFromPolygon(payload, _estimateGasAmountOne);\\n        }\\n    }\\n\\n    function _handleClaimWinningsCrossChain(\\n        uint256 _individualWinnerAmountInKrabz,\\n        address _user,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        if (block.chainid == FILECOIN_CHAIN_ID) {\\n            // inner payload\\n            bytes memory innerPayload = abi.encode(_individualWinnerAmountInKrabz, _user);\\n\\n            // main payload\\n            bytes memory payload = abi.encode(claimWinningsPath, innerPayload);\\n\\n            _sendPayloadFromFilecoin(payload, _estimateGasAmountOne);\\n        }\\n\\n        if (block.chainid == POLYGON_CHAIN_ID) {\\n            // inner payload\\n            bytes memory innerPayload = abi.encode(_individualWinnerAmountInKrabz, _user);\\n\\n            // main payload\\n            bytes memory payload = abi.encode(claimWinningsPath, innerPayload);\\n\\n            _sendPayloadFromPolygon(payload, _estimateGasAmountOne);\\n        }\\n    }\\n\\n    function _handleSetRandomWinnersCrossChain(\\n        uint256 _currentRound,\\n        uint256[3] memory _randomWinningNumbers,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        bytes memory innerPayload = abi.encode(_currentRound, _randomWinningNumbers);\\n\\n        bytes memory payload = abi.encode(setRandomWinnersPath, innerPayload);\\n\\n        if (block.chainid == FILECOIN_CHAIN_ID) {\\n            _sendPayloadFromFilecoin(payload, _estimateGasAmountOne);\\n        }\\n\\n        if (block.chainid == POLYGON_CHAIN_ID) {\\n            _sendPayloadFromPolygon(payload, _estimateGasAmountOne);\\n        }\\n    }\\n\\n    // AXELAR FUNCTIONS\\n\\n    // Handles calls created by setAndSend. Updates this contract's value\\n    function _execute(string calldata, string calldata, bytes calldata payload) internal override {\\n        (uint256 executionPath, bytes memory innerPayload) = abi.decode(payload, (uint256, bytes));\\n\\n        // top up wallet execution path\\n        if (executionPath == topUpWalletPath) {\\n            (uint256 chainid, bool nativeAsset, uint256 amount, address user) = abi.decode(\\n                innerPayload,\\n                (uint256, bool, uint256, address)\\n            );\\n\\n            _handleTopupWalletExecutionPath(chainid, nativeAsset, amount, user);\\n        }\\n\\n        // buy ticket path\\n        if (executionPath == buyTicketPath) {\\n            // unpack innerpayload\\n            (\\n                uint256 ticketId,\\n                address user,\\n                uint256[3] memory selectedNumbers,\\n                uint256 originChainId,\\n                bool nativeAsset,\\n                uint256 requiredAsset,\\n                uint256 currentRoundId,\\n                Ticket memory ticket\\n            ) = abi.decode(\\n                    innerPayload,\\n                    (uint256, address, uint256[3], uint256, bool, uint256, uint256, Ticket)\\n                );\\n\\n            _handleBuyTicketexecutionPath(\\n                ticketId,\\n                user,\\n                selectedNumbers,\\n                originChainId,\\n                nativeAsset,\\n                requiredAsset,\\n                currentRoundId,\\n                ticket\\n            );\\n        }\\n\\n        if (executionPath == newRoundPath) {\\n            (\\n                uint256 currentRoundId,\\n                uint256 roundEndTime,\\n                uint256 ticketPriceInUsd,\\n                string memory roundName\\n            ) = abi.decode(innerPayload, (uint256, uint256, uint256, string));\\n\\n            // start new round\\n            currentRound = currentRoundId;\\n\\n            // update the round details\\n            roundIdToRoundDetails_[currentRoundId].roundId = currentRoundId;\\n            roundIdToRoundDetails_[currentRoundId].ticketPrice = ticketPriceInUsd;\\n            roundIdToRoundDetails_[currentRoundId].roundEndTime = roundEndTime;\\n            roundIdToRoundDetails_[currentRoundId].roundName = roundName;\\n        }\\n\\n        if (executionPath == setRandomWinnersPath) {\\n            // unpack innerpayload\\n            (uint256 roundId, uint256[3] memory randomWinningNumbers) = abi.decode(\\n                innerPayload,\\n                (uint256, uint256[3])\\n            );\\n\\n            // update round details\\n            roundIdToRoundDetails_[roundId].roundState = true;\\n            roundIdToRoundDetails_[roundId].roundWinningNumbers = randomWinningNumbers;\\n        }\\n\\n        if (executionPath == claimWinningsPath) {\\n            // unpack inner payload\\n            (uint256 individualWinnerAmountInKrabz, address user) = abi.decode(\\n                innerPayload,\\n                (uint256, address)\\n            );\\n\\n            // update users krabz balance\\n            userDetails_[user].balance.krabz += individualWinnerAmountInKrabz;\\n\\n            // update winning count\\n            userDetails_[user].totalWinnings += 1;\\n        }\\n\\n        if (executionPath == withdrawFromWalletPath) {\\n            (uint256 assetType, uint256 amount, address user) = abi.decode(\\n                innerPayload,\\n                (uint256, uint256, address)\\n            );\\n\\n            if (assetType == FILECOIN_CHAIN_ID) {\\n                userDetails_[user].balance.fil -= amount;\\n            }\\n\\n            if (assetType == POLYGON_CHAIN_ID) {\\n                userDetails_[user].balance.matic -= amount;\\n            }\\n\\n            if (assetType == 3) {\\n                userDetails_[user].balance.krabz -= amount;\\n            }\\n        }\\n    }\\n\\n    ///// EXECUTION PATH HANDLERS ////\\n\\n    // handle wallet top up execution reception\\n    function _handleTopupWalletExecutionPath(\\n        uint256 _chainid,\\n        bool _nativeAsset,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        if (_chainid == FILECOIN_CHAIN_ID) {\\n            if (_nativeAsset) userDetails_[_user].balance.fil += _amount;\\n            else userDetails_[_user].balance.krabz += _amount;\\n        }\\n\\n        if (_chainid == POLYGON_CHAIN_ID) {\\n            if (_nativeAsset) userDetails_[_user].balance.matic += _amount;\\n            else userDetails_[_user].balance.krabz += _amount;\\n        }\\n    }\\n\\n    // buy ticket execution path\\n    function _handleBuyTicketexecutionPath(\\n        uint256 _ticketId,\\n        address _user,\\n        uint256[3] memory _selectedNumbers,\\n        uint256 _originChainId,\\n        bool _nativeAsset,\\n        uint256 _requiredAsset,\\n        uint256 _currentRoundId,\\n        Ticket memory _ticket\\n    ) internal {\\n        if (_nativeAsset) {\\n            if (_originChainId == FILECOIN_CHAIN_ID) {\\n                // deduct from users wallet balance\\n                userDetails_[_user].balance.fil -= _requiredAsset;\\n\\n                // update the lotto corss chain balance\\n                roundIdToRoundDetails_[_currentRoundId].balance.fil += _requiredAsset;\\n            }\\n\\n            if (_originChainId == POLYGON_CHAIN_ID) {\\n                // deduct from users wallet balance\\n                userDetails_[_user].balance.matic -= _requiredAsset;\\n\\n                // update the lotto corss chain balance\\n                roundIdToRoundDetails_[_currentRoundId].balance.matic += _requiredAsset;\\n            }\\n        } else {\\n            // deduct from users wallet balance\\n            userDetails_[_user].balance.krabz -= _requiredAsset;\\n\\n            // update the lotto corss chain balance\\n            roundIdToRoundDetails_[_currentRoundId].balance.krabz += _requiredAsset;\\n        }\\n\\n        // increment round participations => no of tickets purchased\\n        roundIdToRoundDetails_[_currentRoundId].ticketsPurchased += 1;\\n\\n        // update ticket details\\n        roundToticketId_[_currentRoundId][_ticketId] = Ticket({\\n            owner: _user,\\n            ID: _ticketId,\\n            selectedNumbers: _selectedNumbers,\\n            withdrawn: false,\\n            originChain: _originChainId\\n        });\\n\\n        userDetails_[_user].totalTicketsPurchased += 1;\\n\\n        roundIdToTicketList_[_currentRoundId].push(_ticket);\\n\\n        ticketsPurchasedPerRound_[_currentRoundId][_user] += 1;\\n    }\\n\\n    ///// SEND PAYLOAD CROSS CHAIN FUNCTIONS ////\\n\\n    // sending cc message from filecoin\\n    function _sendPayloadFromFilecoin(\\n        bytes memory _payload,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        // Filecoin ->  Polygon\\n\\n        gasService.payNativeGasForContractCall{value: _estimateGasAmountOne}(\\n            address(this),\\n            polygonChain,\\n            polygonDestinationAddr,\\n            _payload,\\n            address(this)\\n        );\\n\\n        gateway.callContract(polygonChain, polygonDestinationAddr, _payload);\\n    }\\n\\n    // sending cc message from polygon\\n    function _sendPayloadFromPolygon(\\n        bytes memory _payload,\\n        uint256 _estimateGasAmountOne\\n    ) internal {\\n        // Polygon -> Filecoin\\n\\n        gasService.payNativeGasForContractCall{value: _estimateGasAmountOne}(\\n            address(this),\\n            filecoinChain,\\n            filecoinDestinationAddr,\\n            _payload,\\n            address(this)\\n        );\\n\\n        gateway.callContract(filecoinChain, filecoinDestinationAddr, _payload);\\n    }\\n\\n    // ASSET PRICE\\n\\n    // returns asset price given asset name\\n    function getAssetPriceUsd(string memory _assetName) public view returns (uint256) {\\n        bytes memory specificQuery = abi.encode(_assetName, \\\"usd\\\");\\n        bytes memory _queryData = abi.encode(\\\"SpotPrice\\\", specificQuery);\\n\\n        bytes32 _queryId = keccak256(_queryData);\\n\\n        (bytes memory _value, uint256 _timestampRetrieved) = getDataBefore(\\n            _queryId,\\n            block.timestamp - 20 minutes\\n        );\\n        if (_timestampRetrieved == 0) return 0;\\n\\n        return abi.decode(_value, (uint256)) / 1e10;\\n    }\\n\\n    ////// HELPER FUNCTIONS /////\\n    function isWinner(uint256 _ticketId) public view returns (bool) {\\n        uint256[3] memory ticketSelections = roundToticketId_[currentRound][_ticketId]\\n            .selectedNumbers;\\n\\n        uint256[3] memory winningSelections = roundIdToRoundDetails_[currentRound]\\n            .roundWinningNumbers;\\n        bool equal = _checkEquality(ticketSelections, winningSelections);\\n        return equal;\\n    }\\n\\n    function getTotalRoundWinners() public view returns (uint256) {\\n        uint256 totalWinners;\\n        for (uint i = 0; i < roundIdToTicketList_[currentRound].length; i++) {\\n            uint256 ticketId = roundIdToTicketList_[currentRound][i].ID;\\n            if (isWinner(ticketId)) {\\n                totalWinners += 1;\\n            }\\n        }\\n\\n        return totalWinners;\\n    }\\n\\n    function getRoundPoolBalanceUsd() public view returns (uint256) {\\n        // fil\\n        uint256 filRoundBalance = roundIdToRoundDetails_[currentRound].balance.fil;\\n        uint256 filPoolBalanceInUsd = (getAssetPriceUsd(\\\"fil\\\") * filRoundBalance) / 10 ** 18;\\n\\n        // matic\\n        uint256 maticRoundBalance = roundIdToRoundDetails_[currentRound].balance.matic;\\n        uint256 maticPoolBalanceInUsd = (getAssetPriceUsd(\\\"matic\\\") * maticRoundBalance) / 10 ** 18;\\n\\n        uint256 totalRoundBalance = filPoolBalanceInUsd + maticPoolBalanceInUsd;\\n\\n        return (totalRoundBalance * 70) / 100;\\n    }\\n\\n    function _checkEquality(\\n        uint256[3] memory _winningSelections,\\n        uint256[3] memory _userSelections\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _winningSelections.length; i++) {\\n            if (_winningSelections[i] != _userSelections[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    ////// UI GETTER FUNCTIONS /////\\n\\n    // get user details\\n    function getUserDetails(address _user) public view returns (User memory) {\\n        return userDetails_[_user];\\n    }\\n\\n    // get users tickets\\n    function getUserTicketsForCurrentRound(address _user) public view returns (Ticket[] memory) {\\n        uint256 ticketCount = 0;\\n\\n        // count the number of tickets owned by the user\\n        for (uint i = 0; i < roundIdToTicketList_[currentRound].length; i++) {\\n            if (roundIdToTicketList_[currentRound][i].owner == _user) {\\n                ticketCount++;\\n            }\\n        }\\n\\n        // create a new array to store the users tickets\\n        Ticket[] memory userTickets = new Ticket[](ticketCount);\\n        uint256 currentIndex = 0;\\n\\n        // iterate over the tickets and populate the user's ticket array\\n        for (uint i = 0; i < roundIdToTicketList_[currentRound].length; i++) {\\n            if (roundIdToTicketList_[currentRound][i].owner == _user) {\\n                userTickets[currentIndex] = roundIdToTicketList_[currentRound][i];\\n            }\\n\\n            currentIndex += 1;\\n        }\\n\\n        return userTickets;\\n    }\\n\\n    //get current round\\n    function getCurrentRoundDetails() public view returns (Round memory) {\\n        return roundIdToRoundDetails_[currentRound];\\n    }\\n\\n    // tickets purchased per round\\n    function getTicketsPurchasedPerRound(address _user) public view returns (uint256) {\\n        return ticketsPurchasedPerRound_[currentRound][_user];\\n    }\\n\\n    ////// UPDATE FUNCTIONS //////\\n    function updateDestinationAddresses(\\n        string memory _filDestinationAddress,\\n        string memory _polygonDestinationAddress\\n    ) public {\\n        filecoinDestinationAddr = _filDestinationAddress;\\n        polygonDestinationAddr = _polygonDestinationAddress;\\n    }\\n\\n    // WITHDRAW FROM CROSS CHAIN WALLET //////\\n    function withdrawFromWallet(\\n        uint256 _assetType,\\n        uint256 _amount,\\n        uint256 _estimateGasAmount\\n    ) public {\\n        // asset type 3141 = fil\\n        // asset type 80001 = matic\\n        // asset type 3 = krabz\\n\\n        if (_assetType == FILECOIN_CHAIN_ID) {\\n            if (userDetails_[msg.sender].balance.fil < _amount) revert(\\\"insufficient balance\\\");\\n            userDetails_[msg.sender].balance.fil -= _amount;\\n            (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"!ok\\\");\\n        }\\n\\n        if (_assetType == POLYGON_CHAIN_ID) {\\n            if (userDetails_[msg.sender].balance.matic < _amount) revert(\\\"insufficient balance\\\");\\n            userDetails_[msg.sender].balance.matic -= _amount;\\n            (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"!ok\\\");\\n        }\\n\\n        if (_assetType == 3) {\\n            if (userDetails_[msg.sender].balance.krabz < _amount) revert(\\\"insufficient balance\\\");\\n            userDetails_[msg.sender].balance.krabz -= _amount;\\n            IERC20(krabzTokenAddress).transfer(msg.sender, _amount);\\n        }\\n\\n        bytes memory innerPayload = abi.encode(_assetType, _amount, msg.sender);\\n\\n        bytes memory payload = abi.encode(withdrawFromWalletPath, innerPayload);\\n\\n        if (block.chainid == FILECOIN_CHAIN_ID) {\\n            _sendPayloadFromFilecoin(payload, _estimateGasAmount);\\n        }\\n\\n        if (block.chainid == POLYGON_CHAIN_ID) {\\n            _sendPayloadFromPolygon(payload, _estimateGasAmount);\\n        }\\n    }\\n\\n    function getCurrentTimeStamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    //// TETSING ///\\n    function withdrawNativeAsset() public {\\n        require(msg.sender == deployer, \\\"!deployer\\\");\\n        uint256 contractBalance = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: contractBalance}(\\\"\\\");\\n        require(success, \\\"!successful\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xeaf80ff809fcefcd537125abecb9eb0d9ce387eecbe0c031aa72e451649ec30d\",\"license\":\"MIT\"},\"usingtellor/contracts/UsingTellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interface/ITellor.sol\\\";\\nimport \\\"./interface/IERC2362.sol\\\";\\nimport \\\"./interface/IMappingContract.sol\\\";\\n\\n/**\\n @author Tellor Inc\\n @title UsingTellor\\n @dev This contract helps smart contracts read data from Tellor\\n */\\ncontract UsingTellor is IERC2362 {\\n    ITellor public tellor;\\n    IMappingContract public idMappingContract;\\n\\n    /*Constructor*/\\n    /**\\n     * @dev the constructor sets the oracle address in storage\\n     * @param _tellor is the Tellor Oracle address\\n     */\\n    constructor(address payable _tellor) {\\n        tellor = ITellor(_tellor);\\n    }\\n\\n    /*Getters*/\\n    /**\\n     * @dev Retrieves the next value for the queryId after the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp after which to search for next value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function getDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bytes memory _value, uint256 _timestampRetrieved)\\n    {\\n        (bool _found, uint256 _index) = getIndexForDataAfter(\\n            _queryId,\\n            _timestamp\\n        );\\n        if (!_found) {\\n            return (\\\"\\\", 0);\\n        }\\n        _timestampRetrieved = getTimestampbyQueryIdandIndex(_queryId, _index);\\n        _value = retrieveData(_queryId, _timestampRetrieved);\\n        return (_value, _timestampRetrieved);\\n    }\\n\\n    /**\\n     * @dev Retrieves the latest value for the queryId before the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp before which to search for latest value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function getDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bytes memory _value, uint256 _timestampRetrieved)\\n    {\\n        (, _value, _timestampRetrieved) = tellor.getDataBefore(\\n            _queryId,\\n            _timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves latest array index of data before the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp before which to search for the latest index\\n     * @return _found whether the index was found\\n     * @return _index the latest index found before the specified timestamp\\n     */\\n    // slither-disable-next-line calls-loop\\n    function getIndexForDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bool _found, uint256 _index)\\n    {\\n        uint256 _count = getNewValueCountbyQueryId(_queryId);\\n        if (_count == 0) return (false, 0);\\n        _count--;\\n        bool _search = true; // perform binary search\\n        uint256 _middle = 0;\\n        uint256 _start = 0;\\n        uint256 _end = _count;\\n        uint256 _timestampRetrieved;\\n        // checking boundaries to short-circuit the algorithm\\n        _timestampRetrieved = getTimestampbyQueryIdandIndex(_queryId, _end);\\n        if (_timestampRetrieved <= _timestamp) return (false, 0);\\n        _timestampRetrieved = getTimestampbyQueryIdandIndex(_queryId, _start);\\n        if (_timestampRetrieved > _timestamp) {\\n            // candidate found, check for disputes\\n            _search = false;\\n        }\\n        // since the value is within our boundaries, do a binary search\\n        while (_search) {\\n            _middle = (_end + _start) / 2;\\n            _timestampRetrieved = getTimestampbyQueryIdandIndex(\\n                _queryId,\\n                _middle\\n            );\\n            if (_timestampRetrieved > _timestamp) {\\n                // get immediate previous value\\n                uint256 _prevTime = getTimestampbyQueryIdandIndex(\\n                    _queryId,\\n                    _middle - 1\\n                );\\n                if (_prevTime <= _timestamp) {\\n                    // candidate found, check for disputes\\n                    _search = false;\\n                } else {\\n                    // look from start to middle -1(prev value)\\n                    _end = _middle - 1;\\n                }\\n            } else {\\n                // get immediate next value\\n                uint256 _nextTime = getTimestampbyQueryIdandIndex(\\n                    _queryId,\\n                    _middle + 1\\n                );\\n                if (_nextTime > _timestamp) {\\n                    // candidate found, check for disputes\\n                    _search = false;\\n                    _middle++;\\n                    _timestampRetrieved = _nextTime;\\n                } else {\\n                    // look from middle + 1(next value) to end\\n                    _start = _middle + 1;\\n                }\\n            }\\n        }\\n        // candidate found, check for disputed values\\n        if (!isInDispute(_queryId, _timestampRetrieved)) {\\n            // _timestampRetrieved is correct\\n            return (true, _middle);\\n        } else {\\n            // iterate forward until we find a non-disputed value\\n            while (\\n                isInDispute(_queryId, _timestampRetrieved) && _middle < _count\\n            ) {\\n                _middle++;\\n                _timestampRetrieved = getTimestampbyQueryIdandIndex(\\n                    _queryId,\\n                    _middle\\n                );\\n            }\\n            if (\\n                _middle == _count && isInDispute(_queryId, _timestampRetrieved)\\n            ) {\\n                return (false, 0);\\n            }\\n            // _timestampRetrieved is correct\\n            return (true, _middle);\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves latest array index of data before the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp before which to search for the latest index\\n     * @return _found whether the index was found\\n     * @return _index the latest index found before the specified timestamp\\n     */\\n    // slither-disable-next-line calls-loop\\n    function getIndexForDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bool _found, uint256 _index)\\n    {\\n        return tellor.getIndexForDataBefore(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Retrieves multiple uint256 values before the specified timestamp\\n     * @param _queryId the unique id of the data query\\n     * @param _timestamp the timestamp before which to search for values\\n     * @param _maxAge the maximum number of seconds before the _timestamp to search for values\\n     * @param _maxCount the maximum number of values to return\\n     * @return _values the values retrieved, ordered from oldest to newest\\n     * @return _timestamps the timestamps of the values retrieved\\n     */\\n    function getMultipleValuesBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp,\\n        uint256 _maxAge,\\n        uint256 _maxCount\\n    )\\n        public\\n        view\\n        returns (bytes[] memory _values, uint256[] memory _timestamps)\\n    {\\n        // get index of first possible value\\n        (bool _ifRetrieve, uint256 _startIndex) = getIndexForDataAfter(\\n            _queryId,\\n            _timestamp - _maxAge\\n        );\\n        // no value within range\\n        if (!_ifRetrieve) {\\n            return (new bytes[](0), new uint256[](0));\\n        }\\n        uint256 _endIndex;\\n        // get index of last possible value\\n        (_ifRetrieve, _endIndex) = getIndexForDataBefore(_queryId, _timestamp);\\n        // no value before _timestamp\\n        if (!_ifRetrieve) {\\n            return (new bytes[](0), new uint256[](0));\\n        }\\n        uint256 _valCount = 0;\\n        uint256 _index = 0;\\n        uint256[] memory _timestampsArrayTemp = new uint256[](_maxCount);\\n        // generate array of non-disputed timestamps within range\\n        while (_valCount < _maxCount && _endIndex + 1 - _index > _startIndex) {\\n            uint256 _timestampRetrieved = getTimestampbyQueryIdandIndex(\\n                _queryId,\\n                _endIndex - _index\\n            );\\n            if (!isInDispute(_queryId, _timestampRetrieved)) {\\n                _timestampsArrayTemp[_valCount] = _timestampRetrieved;\\n                _valCount++;\\n            }\\n            _index++;\\n        }\\n\\n        bytes[] memory _valuesArray = new bytes[](_valCount);\\n        uint256[] memory _timestampsArray = new uint256[](_valCount);\\n        // retrieve values and reverse timestamps order\\n        for (uint256 _i = 0; _i < _valCount; _i++) {\\n            _timestampsArray[_i] = _timestampsArrayTemp[_valCount - 1 - _i];\\n            _valuesArray[_i] = retrieveData(_queryId, _timestampsArray[_i]);\\n        }\\n        return (_valuesArray, _timestampsArray);\\n    }\\n\\n    /**\\n     * @dev Counts the number of values that have been submitted for the queryId\\n     * @param _queryId the id to look up\\n     * @return uint256 count of the number of values received for the queryId\\n     */\\n    function getNewValueCountbyQueryId(bytes32 _queryId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return tellor.getNewValueCountbyQueryId(_queryId);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the reporter who submitted a value for a data ID at a specific time\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp to find a corresponding reporter for\\n     * @return address of the reporter who reported the value for the data ID at the given timestamp\\n     */\\n    function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return tellor.getReporterByTimestamp(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Gets the timestamp for the value based on their index\\n     * @param _queryId is the id to look up\\n     * @param _index is the value index to look up\\n     * @return uint256 timestamp\\n     */\\n    function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return tellor.getTimestampbyQueryIdandIndex(_queryId, _index);\\n    }\\n\\n    /**\\n     * @dev Determines whether a value with a given queryId and timestamp has been disputed\\n     * @param _queryId is the value id to look up\\n     * @param _timestamp is the timestamp of the value to look up\\n     * @return bool true if queryId/timestamp is under dispute\\n     */\\n    function isInDispute(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return tellor.isInDispute(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Retrieve value from oracle based on queryId/timestamp\\n     * @param _queryId being requested\\n     * @param _timestamp to retrieve data/value from\\n     * @return bytes value for query/timestamp submitted\\n     */\\n    function retrieveData(bytes32 _queryId, uint256 _timestamp)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return tellor.retrieveData(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev allows dev to set mapping contract for valueFor (EIP2362)\\n     * @param _addy address of mapping contract\\n     */\\n    function setIdMappingContract(address _addy) external {\\n        require(address(idMappingContract) == address(0));\\n        idMappingContract = IMappingContract(_addy);\\n    }\\n\\n    /**\\n     * @dev Retrieve most recent int256 value from oracle based on queryId\\n     * @param _id being requested\\n     * @return _value most recent value submitted\\n     * @return _timestamp timestamp of most recent value\\n     * @return _statusCode 200 if value found, 404 if not found\\n     */\\n    function valueFor(bytes32 _id)\\n        external\\n        view\\n        override\\n        returns (\\n            int256 _value,\\n            uint256 _timestamp,\\n            uint256 _statusCode\\n        )\\n    {\\n        bytes32 _queryId = idMappingContract.getTellorID(_id);\\n        bytes memory _valueBytes;\\n        (_valueBytes, _timestamp) = getDataBefore(\\n            _queryId,\\n            block.timestamp + 1\\n        );\\n        if (_timestamp == 0) {\\n            return (0, 0, 404);\\n        }\\n        uint256 _valueUint = _sliceUint(_valueBytes);\\n        _value = int256(_valueUint);\\n        return (_value, _timestamp, 200);\\n    }\\n\\n    // Internal functions\\n    /**\\n     * @dev Convert bytes to uint256\\n     * @param _b bytes value to convert to uint256\\n     * @return _number uint256 converted from bytes\\n     */\\n    function _sliceUint(bytes memory _b)\\n        internal\\n        pure\\n        returns (uint256 _number)\\n    {\\n        for (uint256 _i = 0; _i < _b.length; _i++) {\\n            _number = _number * 256 + uint8(_b[_i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x501fcbc9b54358d9ed542c6d2ef4bfb36475db41164a6201ca7d5b3757cf76fe\",\"license\":\"MIT\"},\"usingtellor/contracts/interface/IERC2362.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n    * @dev EIP2362 Interface for pull oracles\\n    * https://github.com/tellor-io/EIP-2362\\n*/\\ninterface IERC2362\\n{\\n\\t/**\\n\\t * @dev Exposed function pertaining to EIP standards\\n\\t * @param _id bytes32 ID of the query\\n\\t * @return int,uint,uint returns the value, timestamp, and status code of query\\n\\t */\\n\\tfunction valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\\n}\",\"keccak256\":\"0x2f7a0ab05c8a55198d27e3b531069376555c9c8e09a69572d86a5db4da233eb4\",\"license\":\"MIT\"},\"usingtellor/contracts/interface/IMappingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMappingContract{\\n    function getTellorID(bytes32 _id) external view returns(bytes32);\\n}\",\"keccak256\":\"0x812d3bfa812263b73355b9b19694ae2ce1020a5e80bed7ef8061d2d9b25c1293\",\"license\":\"MIT\"},\"usingtellor/contracts/interface/ITellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITellor {\\n    //Controller\\n    function addresses(bytes32) external view returns (address);\\n\\n    function uints(bytes32) external view returns (uint256);\\n\\n    function burn(uint256 _amount) external;\\n\\n    function changeDeity(address _newDeity) external;\\n\\n    function changeOwner(address _newOwner) external;\\n    function changeUint(bytes32 _target, uint256 _amount) external;\\n\\n    function migrate() external;\\n\\n    function mint(address _reciever, uint256 _amount) external;\\n\\n    function init() external;\\n\\n    function getAllDisputeVars(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            bool,\\n            bool,\\n            bool,\\n            address,\\n            address,\\n            address,\\n            uint256[9] memory,\\n            int256\\n        );\\n\\n    function getDisputeIdByDisputeHash(bytes32 _hash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDisputeUintVars(uint256 _disputeId, bytes32 _data)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLastNewValueById(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256, bool);\\n\\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNewValueCountbyRequestId(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAddressVars(bytes32 _data) external view returns (address);\\n\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function isMigrated(address _addy) external view returns (bool);\\n\\n    function allowance(address _user, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allowedToTrade(address _user, uint256 _amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function approveAndTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function balanceOfAt(address _user, uint256 _blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transfer(address _to, uint256 _amount)\\n        external\\n        returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool success);\\n\\n    function depositStake() external;\\n\\n    function requestStakingWithdraw() external;\\n\\n    function withdrawStake() external;\\n\\n    function changeStakingStatus(address _reporter, uint256 _status) external;\\n\\n    function slashReporter(address _reporter, address _disputer) external;\\n\\n    function getStakerInfo(address _staker)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNewCurrentVariables()\\n        external\\n        view\\n        returns (\\n            bytes32 _c,\\n            uint256[5] memory _r,\\n            uint256 _d,\\n            uint256 _t\\n        );\\n\\n    function getNewValueCountbyQueryId(bytes32 _queryId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function retrieveData(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    //Governance\\n    enum VoteResult {\\n        FAILED,\\n        PASSED,\\n        INVALID\\n    }\\n\\n    function setApprovedFunction(bytes4 _func, bool _val) external;\\n\\n    function beginDispute(bytes32 _queryId, uint256 _timestamp) external;\\n\\n    function delegate(address _delegate) external;\\n\\n    function delegateOfAt(address _user, uint256 _blockNumber)\\n        external\\n        view\\n        returns (address);\\n\\n    function executeVote(uint256 _disputeId) external;\\n\\n    function proposeVote(\\n        address _contract,\\n        bytes4 _function,\\n        bytes calldata _data,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function tallyVotes(uint256 _disputeId) external;\\n\\n    function governance() external view returns (address);\\n\\n    function updateMinDisputeFee() external;\\n\\n    function verify() external pure returns (uint256);\\n\\n    function vote(\\n        uint256 _disputeId,\\n        bool _supports,\\n        bool _invalidQuery\\n    ) external;\\n\\n    function voteFor(\\n        address[] calldata _addys,\\n        uint256 _disputeId,\\n        bool _supports,\\n        bool _invalidQuery\\n    ) external;\\n\\n    function getDelegateInfo(address _holder)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function isFunctionApproved(bytes4 _func) external view returns (bool);\\n\\n    function isApprovedGovernanceContract(address _contract)\\n        external\\n        returns (bool);\\n\\n    function getVoteRounds(bytes32 _hash)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getVoteCount() external view returns (uint256);\\n\\n    function getVoteInfo(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint256[9] memory,\\n            bool[2] memory,\\n            VoteResult,\\n            bytes memory,\\n            bytes4,\\n            address[2] memory\\n        );\\n\\n    function getDisputeInfo(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bytes memory,\\n            address\\n        );\\n\\n    function getOpenDisputesOnId(bytes32 _queryId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function didVote(uint256 _disputeId, address _voter)\\n        external\\n        view\\n        returns (bool);\\n\\n    //Oracle\\n    function getReportTimestampByIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReportingLock() external view returns (uint256);\\n\\n    function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (address);\\n\\n    function reportingLock() external view returns (uint256);\\n\\n    function removeValue(bytes32 _queryId, uint256 _timestamp) external;\\n    function getTipsByUser(address _user) external view returns(uint256);\\n    function tipQuery(bytes32 _queryId, uint256 _tip, bytes memory _queryData) external;\\n    function submitValue(bytes32 _queryId, bytes calldata _value, uint256 _nonce, bytes memory _queryData) external;\\n    function burnTips() external;\\n\\n    function changeReportingLock(uint256 _newReportingLock) external;\\n    function getReportsSubmittedByAddress(address _reporter) external view returns(uint256);\\n    function changeTimeBasedReward(uint256 _newTimeBasedReward) external;\\n    function getReporterLastTimestamp(address _reporter) external view returns(uint256);\\n    function getTipsById(bytes32 _queryId) external view returns(uint256);\\n    function getTimeBasedReward() external view returns(uint256);\\n    function getTimestampCountById(bytes32 _queryId) external view returns(uint256);\\n    function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns(uint256);\\n    function getCurrentReward(bytes32 _queryId) external view returns(uint256, uint256);\\n    function getCurrentValue(bytes32 _queryId) external view returns(bytes memory);\\n    function getDataBefore(bytes32 _queryId, uint256 _timestamp) external view returns(bool _ifRetrieve, bytes memory _value, uint256 _timestampRetrieved);\\n    function getTimeOfLastNewValue() external view returns(uint256);\\n    function depositStake(uint256 _amount) external;\\n    function requestStakingWithdraw(uint256 _amount) external;\\n\\n    //Test functions\\n    function changeAddressVar(bytes32 _id, address _addy) external;\\n\\n    //parachute functions\\n    function killContract() external;\\n\\n    function migrateFor(address _destination, uint256 _amount) external;\\n\\n    function rescue51PercentAttack(address _tokenHolder) external;\\n\\n    function rescueBrokenDataReporting() external;\\n\\n    function rescueFailedUpdate() external;\\n\\n    //Tellor 360\\n    function addStakingRewards(uint256 _amount) external;\\n\\n    function _sliceUint(bytes memory _b)\\n        external\\n        pure\\n        returns (uint256 _number);\\n\\n    function claimOneTimeTip(bytes32 _queryId, uint256[] memory _timestamps)\\n        external;\\n\\n    function claimTip(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256[] memory _timestamps\\n    ) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feedsWithFunding(uint256) external view returns (bytes32);\\n\\n    function fundFeed(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256 _amount\\n    ) external;\\n\\n    function getCurrentFeeds(bytes32 _queryId)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getCurrentTip(bytes32 _queryId) external view returns (uint256);\\n\\n    function getDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory _value, uint256 _timestampRetrieved);\\n\\n    function getDataFeed(bytes32 _feedId)\\n        external\\n        view\\n        returns (Autopay.FeedDetails memory);\\n\\n    function getFundedFeeds() external view returns (bytes32[] memory);\\n\\n    function getFundedQueryIds() external view returns (bytes32[] memory);\\n\\n    function getIndexForDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool _found, uint256 _index);\\n\\n    function getIndexForDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool _found, uint256 _index);\\n\\n    function getMultipleValuesBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp,\\n        uint256 _maxAge,\\n        uint256 _maxCount\\n    )\\n        external\\n        view\\n        returns (uint256[] memory _values, uint256[] memory _timestamps);\\n\\n    function getPastTipByIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (Autopay.Tip memory);\\n\\n    function getPastTipCount(bytes32 _queryId) external view returns (uint256);\\n\\n    function getPastTips(bytes32 _queryId)\\n        external\\n        view\\n        returns (Autopay.Tip[] memory);\\n\\n    function getQueryIdFromFeedId(bytes32 _feedId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getRewardAmount(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256[] memory _timestamps\\n    ) external view returns (uint256 _cumulativeReward);\\n\\n    function getRewardClaimedStatus(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (bool);\\n\\n    function getTipsByAddress(address _user) external view returns (uint256);\\n\\n    function isInDispute(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function queryIdFromDataFeedId(bytes32) external view returns (bytes32);\\n\\n    function queryIdsWithFunding(uint256) external view returns (bytes32);\\n\\n    function queryIdsWithFundingIndex(bytes32) external view returns (uint256);\\n\\n    function setupDataFeed(\\n        bytes32 _queryId,\\n        uint256 _reward,\\n        uint256 _startTime,\\n        uint256 _interval,\\n        uint256 _window,\\n        uint256 _priceThreshold,\\n        uint256 _rewardIncreasePerSecond,\\n        bytes memory _queryData,\\n        uint256 _amount\\n    ) external;\\n\\n    function tellor() external view returns (address);\\n\\n    function tip(\\n        bytes32 _queryId,\\n        uint256 _amount,\\n        bytes memory _queryData\\n    ) external;\\n\\n    function tips(bytes32, uint256)\\n        external\\n        view\\n        returns (uint256 amount, uint256 timestamp);\\n\\n    function token() external view returns (address);\\n\\n    function userTipsTotal(address) external view returns (uint256);\\n\\n    function valueFor(bytes32 _id)\\n        external\\n        view\\n        returns (\\n            int256 _value,\\n            uint256 _timestamp,\\n            uint256 _statusCode\\n        );\\n}\\n\\ninterface Autopay {\\n    struct FeedDetails {\\n        uint256 reward;\\n        uint256 balance;\\n        uint256 startTime;\\n        uint256 interval;\\n        uint256 window;\\n        uint256 priceThreshold;\\n        uint256 rewardIncreasePerSecond;\\n        uint256 feedsWithFundingIndex;\\n    }\\n\\n    struct Tip {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n    function getStakeAmount() external view returns(uint256);\\n    function stakeAmount() external view returns(uint256);\\n    function token() external view returns(address);\\n}\\n\",\"keccak256\":\"0xb0a3b11231ea996cf3a63473893c56816a3fd397c545a06656de6390bf8cf8cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610c45600490815562013881600590815560016006908155600260075560036008818155600994909455600a92909255600b55600d5562c61dea600e5561010060405260c0908152673334b632b1b7b4b760c11b60e052600f906200006590826200025e565b506040805180820190915260078152662837b63cb3b7b760c91b60208201526010906200009390826200025e565b50348015620000a157600080fd5b506040516200636638038062006366833981016040819052620000c49162000367565b600080546001600160a01b0319166001600160a01b038481169190911790915584908116620001065760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0390811660805292831660a05260028054919093166001600160a01b03199182161790925550600380549091163317905550620003d5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200018657607f821691505b6020821081036200019b576200019b6200015b565b50919050565b6000620001b2620001af8381565b90565b92915050565b620001c383620001a1565b81546008840282811b60001990911b908116901990911617825550505050565b6000620001f2818484620001b8565b505050565b8181101562000216576200020d600082620001e3565b600101620001f7565b5050565b601f821115620001f2576000818152602090206020601f85010481016020851015620002435750805b620002576020601f860104830182620001f7565b5050505050565b81516001600160401b038111156200027a576200027a62000145565b62000286825462000171565b620002938282856200021a565b6020601f831160018114620002ca5760008415620002b15750858201515b600019600886021c198116600286021786555062000326565b600085815260208120601f198616915b82811015620002fc5788850151825560209485019460019092019101620002da565b86831015620003195784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60006001600160a01b038216620001b2565b6200034b816200032e565b81146200035757600080fd5b50565b8051620001b28162000340565b60008060008060808587031215620003825762000382600080fd5b60006200039087876200035a565b9450506020620003a3878288016200035a565b9350506040620003b6878288016200035a565b9250506060620003c9878288016200035a565b91505092959194509250565b60805160a051615f4162000425600039600081816106aa015281816136ea01526137fc0152600081816103d901528181610d99015281816119620152818161377101526138830152615f416000f3fe6080604052600436106103855760003560e01c8063795688ca116101d1578063c5958af911610102578063de7c756e116100a0578063f78eea831161006f578063f78eea8314610b2e578063fa45cfdd14610b5d578063fcd4a54614610b7d578063ff5c04ce14610bab57600080fd5b8063de7c756e14610ac4578063e07c548614610ad9578063e59fef7c14610af9578063f66f49c314610b0e57600080fd5b8063ce5e11bf116100dc578063ce5e11bf14610a44578063d1813b3314610a64578063d5f3948814610a84578063d98c3c6514610aa457600080fd5b8063c5958af9146109c4578063cb288e8e146109e4578063cc3d967b14610a1757600080fd5b8063a0876f491161016f578063acb8b0c711610149578063acb8b0c71461093e578063ad898f5b14610982578063aebd823a14610998578063b5f597f3146109ae57600080fd5b8063a0876f49146108b9578063a792765f146108f1578063a8c44b231461091157600080fd5b80638527d58f116101ab5780638527d58f1461084b5780638a19c8bc1461086b57806392093527146108815780639bb6eb701461089757600080fd5b8063795688ca146107f65780637e5e219c1461082357806380c1442b1461083657600080fd5b806344e4e0f9116102b65780636a22d8cc1161025457806370ef05db1161022357806370ef05db1461072257806374cdb7111461074457806377b03e0d1461075757806377f372831461077757600080fd5b80636a22d8cc146106985780636a8054c1146106cc5780636abc4367146106ec5780636bfee4ea1461070c57600080fd5b8063491606581161029057806349160658146105c7578063491f3437146105e75780634c21b3691461065457806364ee3c6d1461066a57600080fd5b806344e4e0f91461057157806344e87f9114610591578063469a397b146105b157600080fd5b80631a98b2e011610323578063286db5c2116102fd578063286db5c2146104ee578063294490851461050e5780632af8aae01461053c57806342f5ac521461055c57600080fd5b80631a98b2e0146104a357806320eb5632146104c3578063276f4872146104d957600080fd5b806316f961b71161035f57806316f961b71461042b5780631840920114610441578063193b505b146104615780631959ad5b1461048357600080fd5b80630e39228814610391578063116191b6146103c757806315397a571461040857600080fd5b3661038c57005b600080fd5b34801561039d57600080fd5b506103b16103ac3660046140f1565b610bc0565b6040516103be9190614124565b60405180910390f35b3480156103d357600080fd5b506103fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516103be9190614174565b34801561041457600080fd5b5061041e600d5481565b6040516103be9190614188565b34801561043757600080fd5b5061041e60085481565b34801561044d57600080fd5b5061041e61045c366004614291565b610c6a565b34801561046d57600080fd5b5061048161047c3660046142f1565b610d17565b005b34801561048f57600080fd5b506000546103fb906001600160a01b031681565b3480156104af57600080fd5b506104816104be36600461435d565b610d4f565b3480156104cf57600080fd5b5061041e60055481565b3480156104e557600080fd5b5061041e610e4b565b3480156104fa57600080fd5b50610481610509366004614466565b610f49565b34801561051a57600080fd5b5061052e610529366004614466565b61116f565b6040516103be9291906144a3565b34801561054857600080fd5b506001546103fb906001600160a01b031681565b34801561056857600080fd5b5061041e611207565b34801561057d57600080fd5b5061048161058c36600461456f565b611292565b34801561059d57600080fd5b506103b16105ac366004614466565b611882565b3480156105bd57600080fd5b5061041e600b5481565b3480156105d357600080fd5b506104816105e23660046145bf565b611918565b3480156105f357600080fd5b50610644610602366004614466565b601460209081526000928352604080842090915290825290208054600182015460058301546006909301546001600160a01b0390921692909160ff9091169084565b6040516103be949392919061468b565b34801561066057600080fd5b5061041e600e5481565b34801561067657600080fd5b5061068a610685366004614466565b611a19565b6040516103be929190614718565b3480156106a457600080fd5b506103fb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d857600080fd5b506104816106e7366004614738565b611a72565b3480156106f857600080fd5b50610644610707366004614466565b611d94565b34801561071857600080fd5b5061041e60095481565b34801561072e57600080fd5b50610737611dea565b6040516103be919061477e565b61048161075236600461478f565b611e78565b34801561076357600080fd5b5061041e6107723660046140f1565b611f2c565b34801561078357600080fd5b506107e66107923660046142f1565b601360209081526000918252604091829020805460018201546002830154855160608101875260038501548152600485015495810195909552600590930154948401949094526001600160a01b0316929184565b6040516103be94939291906147fb565b34801561080257600080fd5b50600254610816906001600160a01b031681565b6040516103be9190614830565b34801561082f57600080fd5b504261041e565b34801561084257600080fd5b50610737611fb7565b34801561085757600080fd5b50610481610866366004614466565b611fc4565b34801561087757600080fd5b5061041e600c5481565b34801561088d57600080fd5b5061041e600a5481565b3480156108a357600080fd5b506108ac6121d4565b6040516103be9190614920565b3480156108c557600080fd5b5061041e6108d4366004614931565b601660209081526000928352604080842090915290825290205481565b3480156108fd57600080fd5b5061068a61090c366004614466565b612338565b34801561091d57600080fd5b5061093161092c3660046142f1565b6123d7565b6040516103be9190614a1e565b34801561094a57600080fd5b5061041e6109593660046142f1565b600c5460009081526016602090815260408083206001600160a01b039094168352929052205490565b34801561098e57600080fd5b5061041e60045481565b3480156109a457600080fd5b5061041e60075481565b3480156109ba57600080fd5b5061041e60065481565b3480156109d057600080fd5b506107376109df366004614466565b61261d565b3480156109f057600080fd5b50610a046109ff3660046140f1565b6126ae565b6040516103be9796959493929190614a2f565b348015610a2357600080fd5b50610a37610a323660046142f1565b612796565b6040516103be9190614ae7565b348015610a5057600080fd5b5061041e610a5f366004614466565b61280c565b348015610a7057600080fd5b50610481610a7f366004614af5565b612899565b348015610a9057600080fd5b50600354610816906001600160a01b031681565b348015610ab057600080fd5b50610481610abf366004614b59565b612a88565b348015610ad057600080fd5b50610481612aa6565b348015610ae557600080fd5b50610816610af4366004614466565b612b4c565b348015610b0557600080fd5b50610737612bd9565b348015610b1a57600080fd5b5061052e610b29366004614466565b612be6565b348015610b3a57600080fd5b50610b4e610b493660046140f1565b612da3565b6040516103be93929190614bc1565b348015610b6957600080fd5b50610481610b78366004614be9565b612e85565b348015610b8957600080fd5b50610b9d610b98366004614af5565b612f67565b6040516103be929190614cfb565b348015610bb757600080fd5b50610737613256565b600c54600090815260146020908152604080832084845290915280822081516060810192839052839290916002019060039082845b815481526020019060010190808311610bf5575050600c546000908152601560205260408082208151606081019283905296975091959450600590910192506003915082845b815481526020019060010190808311610c3b57505050505090506000610c618383613263565b95945050505050565b60008082604051602001610c7e9190614d57565b6040516020818303038152906040529050600081604051602001610ca29190614daf565b60408051601f1981840301815291905280516020820120909150600080610ccf8361090c6104b042614de9565b9150915080600003610ce8575060009695505050505050565b6402540be40082806020019051810190610d029190614e07565b610d0c9190614e3e565b979650505050505050565b6001546001600160a01b031615610d2d57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008585604051610d61929190614e65565b6040519081900381207f1876eed900000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed990610dde908e908e908e908e908e9089908d908d908d90600401614e95565b6020604051808303816000875af1158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190614f15565b610e3e57604051631403112d60e21b815260040160405180910390fd5b5050505050505050505050565b60008060156000600c5481526020019081526020016000206009016000015490506000670de0b6b3a764000082610e9c60405180604001604052806003815260200162199a5b60ea1b815250610c6a565b610ea69190614f36565b610eb09190614e3e565b9050600060156000600c5481526020019081526020016000206009016001015490506000670de0b6b3a764000082610f04604051806040016040528060058152602001646d6174696360d81b815250610c6a565b610f0e9190614f36565b610f189190614e3e565b90506000610f268285614f55565b90506064610f35826046614f36565b610f3f9190614e3e565b9550505050505090565b600c5460009081526015602052604090206008015460ff16610f865760405162461bcd60e51b8152600401610f7d90614f9c565b60405180910390fd5b600c5460009081526014602090815260408083208584529091529020600601544614610fc45760405162461bcd60e51b8152600401610f7d90614fe0565b600c5460009081526014602090815260408083208584529091529020546001600160a01b031633146110085760405162461bcd60e51b8152600401610f7d90615024565b600c54600090815260146020908152604080832085845290915290206005015460ff16156110485760405162461bcd60e51b8152600401610f7d90615068565b600061105383610bc0565b9050806110725760405162461bcd60e51b8152600401610f7d906150ac565b600061107c611207565b90506000611088610e4b565b905060006110968383614e3e565b905060006110c1604051806040016040528060068152602001653130b233b2b960d11b815250610c6a565b6110d383670de0b6b3a7640000614f36565b6110dd9190614e3e565b33600090815260136020526040812060050180549293508392909190611104908490614f55565b909155505033600090815260136020526040812060020180546001929061112c908490614f55565b9091555050600c5460009081526014602090815260408083208a84529091529020600501805460ff191660011790556111668133886132c9565b50505050505050565b600080546040517f2944908500000000000000000000000000000000000000000000000000000000815282916001600160a01b0316906329449085906111bb90879087906004016150bc565b6040805180830381865afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb91906150ca565b915091505b9250929050565b60008060005b600c5460009081526017602052604090205481101561128c57600c546000908152601760205260408120805483908110611249576112496150fd565b906000526020600020906007020160010154905061126681610bc0565b1561127957611276600184614f55565b92505b508061128481615113565b91505061120d565b50919050565b600c54600090815260156020526040902060030154428110156112c75760405162461bcd60e51b8152600401610f7d90615161565b600c5460009081526015602052604090206008015460ff16156112fc5760405162461bcd60e51b8152600401610f7d906151a5565b60005b600381101561135157601e85826003811061131c5761131c6150fd565b6020020151111561133f5760405162461bcd60e51b8152600401610f7d906151e9565b8061134981615113565b9150506112ff565b50600c54600090815260156020526040812060040154841561151257600454460361143c5761139a60405180604001604052806003815260200162199a5b60ea1b815250610c6a565b6113ac82670de0b6b3a7640000614f36565b6113b69190614e3e565b336000908152601360205260409020600301549092508211156113eb5760405162461bcd60e51b8152600401610f7d9061522d565b336000908152601360205260408120600301805484929061140d908490614de9565b9091555050600c5460009081526015602052604081206009018054849290611436908490614f55565b90915550505b600554460361150d5761146b604051806040016040528060058152602001646d6174696360d81b815250610c6a565b61147d82670de0b6b3a7640000614f36565b6114879190614e3e565b336000908152601360205260409020600401549092508211156114bc5760405162461bcd60e51b8152600401610f7d90615271565b33600090815260136020526040812060040180548492906114de908490614de9565b9091555050600c546000908152601560205260408120600a018054849290611507908490614f55565b90915550505b6115db565b611539604051806040016040528060068152602001653130b233b2b960d11b815250610c6a565b61154b82670de0b6b3a7640000614f36565b6115559190614e3e565b3360009081526013602052604090206005015490925082111561158a5760405162461bcd60e51b8152600401610f7d90615271565b33600090815260136020526040812060050180548492906115ac908490614de9565b9091555050600c546000908152601560205260408120600b0180548492906115d5908490614f55565b90915550505b600d54600c546000908152601660209081526040808320338452909152902054106116185760405162461bcd60e51b8152600401610f7d906152b5565b600c546000908152601560205260408120600201805460019190839061163f908490614f55565b91829055506040805160a08101825233815260208082018481528284018d8152600060608501819052466080860152600c5481526014845285812087825290935293909120825181546001600160a01b0319166001600160a01b039091161781559051600182015591519294509250906116bf9060028301906003613f4c565b50606082015160058201805460ff19169115159190911790556080909101516006909101553360009081526013602052604081206001908101805491929091611709908490614f55565b9091555050600c54600090815260176020908152604080832060148352818420858552835290832081546001818101845592855292909320835460079093020180546001600160a01b0319166001600160a01b03909316929092178255808301549082015561178060028083019084016003613f8a565b50600582810154908201805460ff191660ff9092161515919091179055600691820154910155600c54600090815260166020908152604080832033845290915281208054600192906117d3908490614f55565b9091555050600c546000818152601460209081526040808320858452825291829020825160a08101845281546001600160a01b03168152600182015492810192909252825160608101845261116694869433948e9446948f948d9490939291908301906002830160038282826020028201915b815481526020019060010190808311611846575050509183525050600582015460ff16151560208201526006909101546040909101528d61338e565b600080546040517f44e87f910000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906344e87f91906118ce90869086906004016150bc565b602060405180830381865afa1580156118eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190614f15565b90505b92915050565b6000828260405161192a929190614e65565b6040519081900381207f5f6970c300000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906119a1908b908b908b908b908b9089906004016152c5565b6020604051808303816000875af11580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e49190614f15565b611a0157604051631403112d60e21b815260040160405180910390fd5b611a0f87878787878761340e565b5050505050505050565b60606000806000611a2a8686612be6565b9150915081611a515760006040518060200160405280600081525090935093505050611200565b611a5b868261280c565b9250611a67868461261d565b935050509250929050565b6004548303611b4c5733600090815260136020526040902060030154821115611aad5760405162461bcd60e51b8152600401610f7d9061533e565b3360009081526013602052604081206003018054849290611acf908490614de9565b909155505060405160009033908490611ae79061534e565b60006040518083038185875af1925050503d8060008114611b24576040519150601f19603f3d011682016040523d82523d6000602084013e611b29565b606091505b5050905080611b4a5760405162461bcd60e51b8152600401610f7d9061538d565b505b6005548303611c265733600090815260136020526040902060040154821115611b875760405162461bcd60e51b8152600401610f7d9061533e565b3360009081526013602052604081206004018054849290611ba9908490614de9565b909155505060405160009033908490611bc19061534e565b60006040518083038185875af1925050503d8060008114611bfe576040519150601f19603f3d011682016040523d82523d6000602084013e611c03565b606091505b5050905080611c245760405162461bcd60e51b8152600401610f7d9061538d565b505b82600303611d175733600090815260136020526040902060050154821115611c605760405162461bcd60e51b8152600401610f7d9061533e565b3360009081526013602052604081206005018054849290611c82908490614de9565b90915550506002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb90611cd2903390869060040161539d565b6020604051808303816000875af1158015611cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d159190614f15565b505b6000838333604051602001611d2e939291906153ab565b60405160208183030381529060405290506000600b5482604051602001611d569291906153d3565b60405160208183030381529060405290506004544603611d7a57611d7a81846136d3565b6005544603611d8d57611d8d81846137e5565b5050505050565b60176020528160005260406000208181548110611db057600080fd5b600091825260209091206007909102018054600182015460058301546006909301546001600160a01b039092169450925060ff9091169084565b60118054611df790615409565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2390615409565b8015611e705780601f10611e4557610100808354040283529160200191611e70565b820191906000526020600020905b815481529060010190602001808311611e5357829003601f168201915b505050505081565b60008215611e87575034611f1a565b506002546040517f23b872dd00000000000000000000000000000000000000000000000000000000815284916001600160a01b0316906323b872dd90611ed59033903090869060040161542f565b6020604051808303816000875af1158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190614f15565b505b611f26818433856138c1565b50505050565b600080546040517f77b03e0d0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906377b03e0d90611f76908590600401614188565b602060405180830381865afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119129190614e07565b60128054611df790615409565b600c5460009081526015602052604090206008015460ff16611ff85760405162461bcd60e51b8152600401610f7d90614f9c565b600c54600090815260146020908152604080832085845290915290206006015446146120365760405162461bcd60e51b8152600401610f7d90614fe0565b600c5460009081526014602090815260408083208584529091529020546001600160a01b0316331461207a5760405162461bcd60e51b8152600401610f7d90615024565b600c54600090815260146020908152604080832085845290915290206005015460ff16156120ba5760405162461bcd60e51b8152600401610f7d9061547e565b60006120c583610bc0565b905080156120e55760405162461bcd60e51b8152600401610f7d906154c2565b600060156000600c548152602001908152602001600020600401549050600061212b604051806040016040528060068152602001653130b233b2b960d11b815250610c6a565b61213d83670de0b6b3a7640000614f36565b6121479190614e3e565b9050606461215682601e614f36565b6121609190614e3e565b3360009081526013602052604081206005018054909190612182908490614f55565b9091555050600c5460009081526014602090815260408083208884529091529020600501805460ff19166001179055611d8d60646121c183601e614f36565b6121cb9190614e3e565b600033876138c1565b6121dc613fb5565b600c54600090815260156020526040908190208151610100810190925280548290829061220890615409565b80601f016020809104026020016040519081016040528092919081815260200182805461223490615409565b80156122815780601f1061225657610100808354040283529160200191612281565b820191906000526020600020905b81548152906001019060200180831161226457829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582016003806020026040519081016040528092919082600380156122ee576020028201915b8154815260200190600101908083116122da575b5050509183525050600882015460ff1615156020808301919091526040805160608101825260098501548152600a85015492810192909252600b9093015481840152910152919050565b600080546040517fa792765f000000000000000000000000000000000000000000000000000000008152606092916001600160a01b03169063a792765f9061238690879087906004016150bc565b600060405180830381865afa1580156123a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123cb919081019061552a565b90969095509350505050565b60606000805b600c5460009081526017602052604090205481101561246557836001600160a01b031660176000600c5481526020019081526020016000208281548110612426576124266150fd565b60009182526020909120600790910201546001600160a01b031603612453578161244f81615113565b9250505b8061245d81615113565b9150506123dd565b5060008167ffffffffffffffff81111561248157612481614196565b6040519080825280602002602001820160405280156124ba57816020015b6124a7614023565b81526020019060019003908161249f5790505b5090506000805b600c5460009081526017602052604090205481101561261357856001600160a01b031660176000600c548152602001908152602001600020828154811061250a5761250a6150fd565b60009182526020909120600790910201546001600160a01b0316036125f457600c54600090815260176020526040902080548290811061254c5761254c6150fd565b60009182526020918290206040805160a08101825260079390930290910180546001600160a01b0316835260018101549383019390935280516060810180835292939291840191600284019060039082845b81548152602001906001019080831161259e575050509183525050600582015460ff161515602082015260069091015460409091015283518490849081106125e8576125e86150fd565b60200260200101819052505b6125ff600183614f55565b91508061260b81615113565b9150506124c1565b5090949350505050565b6000546040517fc5958af90000000000000000000000000000000000000000000000000000000081526060916001600160a01b03169063c5958af99061266990869086906004016150bc565b600060405180830381865afa158015612686573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261190f919081019061558b565b6015602052600090815260409020805481906126c990615409565b80601f01602080910402602001604051908101604052809291908181526020018280546126f590615409565b80156127425780601f1061271757610100808354040283529160200191612742565b820191906000526020600020905b81548152906001019060200180831161272557829003601f168201915b50505050600183015460028401546003850154600486015460088701546040805160608101825260098a01548152600a8a01546020820152600b9099015490890152959693959294509092909160ff169087565b61279e614056565b506001600160a01b03908116600090815260136020908152604091829020825160808101845281549094168452600181015484830152600281015484840152825160608181018552600383015482526004830154938201939093526005909101549281019290925282015290565b600080546040517fce5e11bf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063ce5e11bf9061285890869086906004016150bc565b602060405180830381865afa158015612875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190614e07565b6003546001600160a01b031633146128c35760405162461bcd60e51b8152600401610f7d906155fa565b600c5460009081526015602052604090206008015460ff16156128f85760405162461bcd60e51b8152600401610f7d9061563e565b600c5460009081526015602052604090206003015442101561292c5760405162461bcd60e51b8152600401610f7d90614f9c565b600454461461294d5760405162461bcd60e51b8152600401610f7d90615682565b6000601e600e543387604051602001612968939291906156ba565b6040516020818303038152906040528051906020012060001c61298b91906156f1565b90506000601e600e5433876040516020016129a8939291906156ba565b6040516020818303038152906040528051906020012060001c6129cb91906156f1565b90506000601e600e5433876040516020016129e8939291906156ba565b6040516020818303038152906040528051906020012060001c612a0b91906156f1565b600c80546000908152601560208181526040808420600801805460ff191660011790558051606081018252898152808301899052808201879052945484529190529020919250612a6091600501906003613f4c565b50611166600c5460405180606001604052808681526020018581526020018481525086613a6c565b6011612a94838261579b565b506012612aa1828261579b565b505050565b6003546001600160a01b03163314612ad05760405162461bcd60e51b8152600401610f7d90615892565b604051479060009033908390612ae59061534e565b60006040518083038185875af1925050503d8060008114612b22576040519150601f19603f3d011682016040523d82523d6000602084013e612b27565b606091505b5050905080612b485760405162461bcd60e51b8152600401610f7d906158d6565b5050565b600080546040517fe07c54860000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e07c548690612b9890869086906004016150bc565b602060405180830381865afa158015612bb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f91906158f1565b60108054611df790615409565b6000806000612bf485611f2c565b905080600003612c0b576000809250925050611200565b80612c1581615912565b9150600190506000808381612c2a8a8361280c565b9050888111612c455760008097509750505050505050611200565b612c4f8a8461280c565b905088811115612c5e57600094505b8415612d0e576002612c708484614f55565b612c7a9190614e3e565b9350612c868a8561280c565b905088811115612cc7576000612ca18b610a5f600188614de9565b9050898111612cb35760009550612cc1565b612cbe600186614de9565b92505b50612c5e565b6000612cd88b610a5f876001614f55565b905089811115612cfb576000955084612cf081615113565b955050809150612cc1565b612d06856001614f55565b935050612c5e565b612d188a82611882565b612d2e5760018497509750505050505050611200565b612d388a82611882565b8015612d4357508584105b15612d665783612d5281615113565b945050612d5f8a8561280c565b9050612d2e565b8584148015612d7a5750612d7a8a82611882565b15612d915760008097509750505050505050611200565b60018497509750505050505050611200565b6001546040517f87a475fd0000000000000000000000000000000000000000000000000000000081526000918291829182916001600160a01b03909116906387a475fd90612df5908890600401614188565b602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614e07565b90506060612e498261090c426001614f55565b945090506000849003612e69576000806101949450945094505050612e7e565b6000612e7482613aa9565b955060c893505050505b9193909250565b6003546001600160a01b03163314612eaf5760405162461bcd60e51b8152600401610f7d9061595d565b600c54600090815260156020526040902060030154421015612ee35760405162461bcd60e51b8152600401610f7d90614f9c565b6001600c6000828254612ef69190614f55565b9091555050600c5460008181526015602052604090206001810191909155600401839055612f248442614f55565b600c8054600090815260156020526040808220600301939093559054815220612f4d838261579b565b50600c54611f2690612f5f4287614f55565b858585613afa565b606080600080612f7b88610b29888a614de9565b9150915081612fcc576040805160008082526020820190925290612faf565b6060815260200190600190039081612f9a5790505b50604080516000815260208101909152909450925061324d915050565b6000612fd8898961116f565b90935090508261302b57604080516000808252602082019092529061300d565b6060815260200190600190039081612ff85790505b50604080516000815260208101909152909550935061324d92505050565b60008060008867ffffffffffffffff81111561304957613049614196565b604051908082528060200260200182016040528015613072578160200160208202803683370190505b5090505b88831080156130995750848261308d866001614f55565b6130979190614de9565b115b156130fd5760006130ae8d610a5f8588614de9565b90506130ba8d82611882565b6130ea57808285815181106130d1576130d16150fd565b6020908102919091010152836130e681615113565b9450505b826130f481615113565b93505050613076565b60008367ffffffffffffffff81111561311857613118614196565b60405190808252806020026020018201604052801561314b57816020015b60608152602001906001900390816131365790505b50905060008467ffffffffffffffff81111561316957613169614196565b604051908082528060200260200182016040528015613192578160200160208202803683370190505b50905060005b858110156132405783816131ad600189614de9565b6131b79190614de9565b815181106131c7576131c76150fd565b60200260200101518282815181106131e1576131e16150fd565b6020026020010181815250506132108f838381518110613203576132036150fd565b602002602001015161261d565b838281518110613222576132226150fd565b6020026020010181905250808061323890615113565b915050613198565b5090985096505050505050505b94509492505050565b600f8054611df790615409565b6000805b60038110156132bf57828160038110613282576132826150fd565b6020020151848260038110613299576132996150fd565b6020020151146132ad576000915050611912565b806132b781615113565b915050613267565b5060019392505050565b600454460361332d57600083836040516020016132e792919061596d565b60405160208183030381529060405290506000600a548260405160200161330f9291906153d3565b604051602081830303815290604052905061332a81846136d3565b50505b6005544603612aa1576000838360405160200161334b92919061596d565b60405160208183030381529060405290506000600a54826040516020016133739291906153d3565b6040516020818303038152906040529050611d8d81846137e5565b600089898989898989896040516020016133af9897969594939291906159b4565b60405160208183030381529060405290506000600754826040516020016133d79291906153d3565b604051602081830303815290604052905060045446036133fb576133fb81846136d3565b6005544603610e3e57610e3e81846137e5565b60008061341d83850185615a2d565b91509150600654820361345d57600080600080848060200190518101906134449190615a4f565b935093509350935061345884848484613b72565b505050505b60075482036134af57600080600080600080600080888060200190518101906134869190615b99565b975097509750975097509750975097506134a68888888888888888613c63565b50505050505050505b600854820361351457600080600080848060200190518101906134d29190615c4e565b600c84905560008481526015602052604090206001810185905560048101839055600381018490559397509195509350915061350e828261579b565b50505050505b600954820361356957600080828060200190518101906135349190615cc1565b600082815260156020526040902060088101805460ff19166001179055919350915061356590600501826003613f4c565b5050505b600a5482036135f257600080828060200190518101906135899190615cf4565b6001600160a01b0381166000908152601360205260408120600501805493955091935084926135b9908490614f55565b90915550506001600160a01b03811660009081526013602052604081206002018054600192906135ea908490614f55565b909155505050505b600b548203611a0f576000806000838060200190518101906136149190615d27565b9250925092506004548303613654576001600160a01b0381166000908152601360205260408120600301805484929061364e908490614de9565b90915550505b600554830361368e576001600160a01b03811660009081526013602052604081206004018054849290613688908490614de9565b90915550505b82600303610e3e576001600160a01b038116600090815260136020526040812060050180548492906136c1908490614de9565b90915550505050505050505050505050565b604051630c93e3bb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb90839061372b90309060109060129089908490600401615de7565b6000604051808303818588803b15801561374457600080fd5b505af1158015613758573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350631c92115f92506137af91506010906012908790600401615e48565b600060405180830381600087803b1580156137c957600080fd5b505af11580156137dd573d6000803e3d6000fd5b505050505050565b604051630c93e3bb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb90839061383d903090600f9060119089908490600401615de7565b6000604051808303818588803b15801561385657600080fd5b505af115801561386a573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350631c92115f92506137af9150600f906011908790600401615e48565b6004544603613998578215613906576001600160a01b038216600090815260136020526040812060030180548692906138fb908490614f55565b909155506139379050565b6001600160a01b03821660009081526013602052604081206005018054869290613931908490614f55565b90915550505b60006004548486856040516020016139529493929190615e81565b604051602081830303815290604052905060006006548260405160200161397a9291906153d3565b604051602081830303815290604052905061399581846136d3565b50505b6005544603611f265782156139dd576001600160a01b038216600090815260136020526040812060040180548692906139d2908490614f55565b90915550613a0e9050565b6001600160a01b03821660009081526013602052604081206005018054869290613a08908490614f55565b90915550505b6000600454848685604051602001613a299493929190615e81565b6040516020818303038152906040529050600060065482604051602001613a519291906153d3565b60405160208183030381529060405290506137dd81846137e5565b60008383604051602001613a81929190615eb6565b6040516020818303038152906040529050600060095482604051602001611d569291906153d3565b6000805b825181101561128c57828181518110613ac857613ac86150fd565b016020015160f81c613adc83610100614f36565b613ae69190614f55565b915080613af281615113565b915050613aad565b600085858585604051602001613b139493929190615ed1565b6040516020818303038152906040529050600060085482604051602001613b3b9291906153d3565b60405160208183030381529060405290506004544603613b5f57613b5f81846136d3565b60055446036111665761116681846137e5565b6004548403613be8578215613bb7576001600160a01b03811660009081526013602052604081206003018054849290613bac908490614f55565b90915550613be89050565b6001600160a01b03811660009081526013602052604081206005018054849290613be2908490614f55565b90915550505b6005548403611f26578215613c2d576001600160a01b03811660009081526013602052604081206004018054849290613c22908490614f55565b90915550611f269050565b6001600160a01b03811660009081526013602052604081206005018054849290613c58908490614f55565b909155505050505050565b8315613d2e576004548503613cc9576001600160a01b03871660009081526013602052604081206003018054859290613c9d908490614de9565b909155505060008281526015602052604081206009018054859290613cc3908490614f55565b90915550505b6005548503613d29576001600160a01b03871660009081526013602052604081206004018054859290613cfd908490614de9565b90915550506000828152601560205260408120600a018054859290613d23908490614f55565b90915550505b613d85565b6001600160a01b03871660009081526013602052604081206005018054859290613d59908490614de9565b90915550506000828152601560205260408120600b018054859290613d7f908490614f55565b90915550505b6000828152601560205260408120600201805460019290613da7908490614f55565b90915550506040805160a0810182526001600160a01b03898116825260208083018c81528385018b8152600060608601819052608086018c9052888152601484528681208f825290935294909120835181546001600160a01b03191693169290921782555160018201559151909190613e269060028301906003613f4c565b50606082015160058201805460ff19169115159190911790556080909101516006909101556001600160a01b03871660009081526013602052604081206001908101805491929091613e79908490614f55565b9091555050600082815260176020908152604080832080546001808201835591855293839020855160079095020180546001600160a01b0319166001600160a01b039095169490941784559184015191830191909155820151829190613ee59060028301906003613f4c565b50606082015160058201805460ff191691151591909117905560809091015160069091015560008281526016602090815260408083206001600160a01b038b1684529091528120805460019290613f3d908490614f55565b90915550505050505050505050565b8260038101928215613f7a579160200282015b82811115613f7a578251825591602001919060010190613f5f565b50613f869291506140a3565b5090565b8260038101928215613f7a579182015b82811115613f7a578254825591600101919060010190613f9a565b6040518061010001604052806060815260200160008152602001600081526020016000815260200160008152602001613fec6140b8565b815260200160001515815260200161401e60405180606001604052806000815260200160008152602001600081525090565b905290565b6040805160a081018252600080825260208201529081016140426140b8565b815260006020820181905260409091015290565b604051806080016040528060006001600160a01b03168152602001600081526020016000815260200161401e60405180606001604052806000815260200160008152602001600081525090565b5b80821115613f8657600081556001016140a4565b60405180606001604052806003906020820280368337509192915050565b805b81146140e357600080fd5b50565b8035611912816140d6565b60006020828403121561410657614106600080fd5b600061411284846140e6565b949350505050565b8015155b82525050565b60208101611912828461411a565b60006119126001600160a01b038316614149565b90565b6001600160a01b031690565b600061191282614132565b600061191282614155565b61411e81614160565b60208101611912828461416b565b8061411e565b602081016119128284614182565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156141d2576141d2614196565b6040525050565b60006141e460405190565b90506141f082826141ac565b919050565b600067ffffffffffffffff82111561420f5761420f614196565b601f19601f83011660200192915050565b82818337506000910152565b600061423f61423a846141f5565b6141d9565b90508281526020810184848401111561425a5761425a600080fd5b614265848285614220565b509392505050565b600082601f83011261428157614281600080fd5b813561411284826020860161422c565b6000602082840312156142a6576142a6600080fd5b813567ffffffffffffffff8111156142c0576142c0600080fd5b6141128482850161426d565b60006001600160a01b038216611912565b6140d8816142cc565b8035611912816142dd565b60006020828403121561430657614306600080fd5b600061411284846142e6565b60008083601f84011261432757614327600080fd5b50813567ffffffffffffffff81111561434257614342600080fd5b60208301915083600182028301111561120057611200600080fd5b60008060008060008060008060008060c08b8d03121561437f5761437f600080fd5b600061438b8d8d6140e6565b9a505060208b013567ffffffffffffffff8111156143ab576143ab600080fd5b6143b78d828e01614312565b995099505060408b013567ffffffffffffffff8111156143d9576143d9600080fd5b6143e58d828e01614312565b975097505060608b013567ffffffffffffffff81111561440757614407600080fd5b6144138d828e01614312565b955095505060808b013567ffffffffffffffff81111561443557614435600080fd5b6144418d828e01614312565b935093505060a06144548d828e016140e6565b9150509295989b9194979a5092959850565b6000806040838503121561447c5761447c600080fd5b600061448885856140e6565b9250506020614499858286016140e6565b9150509250929050565b604081016144b1828561411a565b6144be6020830184614182565b9392505050565b600067ffffffffffffffff8211156144df576144df614196565b5060200290565b60006144f461423a846144c5565b9050806020840283018581111561450d5761450d600080fd5b835b81811015614531578061452288826140e6565b8452506020928301920161450f565b5050509392505050565b600082601f83011261454f5761454f600080fd5b60036141128482856144e6565b8015156140d8565b80356119128161455c565b600080600060a0848603121561458757614587600080fd5b6000614593868661453b565b93505060606145a486828701614564565b92505060806145b5868287016140e6565b9150509250925092565b60008060008060008060006080888a0312156145dd576145dd600080fd5b60006145e98a8a6140e6565b975050602088013567ffffffffffffffff81111561460957614609600080fd5b6146158a828b01614312565b9650965050604088013567ffffffffffffffff81111561463757614637600080fd5b6146438a828b01614312565b9450945050606088013567ffffffffffffffff81111561466557614665600080fd5b6146718a828b01614312565b925092505092959891949750929550565b61411e816142cc565b608081016146998287614682565b6146a66020830186614182565b6146b3604083018561411a565b610c616060830184614182565b60005b838110156146db5781810151838201526020016146c3565b50506000910152565b60006146ee825190565b8084526020840193506147058185602086016146c0565b601f19601f8201165b9093019392505050565b6040808252810161472981856146e4565b90506144be6020830184614182565b60008060006060848603121561475057614750600080fd5b600061475c86866140e6565b935050602061476d868287016140e6565b92505060406145b5868287016140e6565b6020808252810161190f81846146e4565b6000806000606084860312156147a7576147a7600080fd5b60006147b386866140e6565b935050602061476d86828701614564565b805160608301906147d58482614182565b5060208201516147e86020850182614182565b506040820151611f266040850182614182565b60c081016148098287614682565b6148166020830186614182565b6148236040830185614182565b610c6160608301846147c4565b602081016119128284614682565b600061484a8383614182565b505060200190565b6003818060005b838110156137dd57815161486d878261483e565b965060208301925050600101614859565b80516101808084526000919084019061489782826146e4565b91505060208301516148ac6020860182614182565b5060408301516148bf6040860182614182565b5060608301516148d26060860182614182565b5060808301516148e56080860182614182565b5060a08301516148f860a0860182614852565b5060c083015161490c61010086018261411a565b5060e08301516142656101208601826147c4565b6020808252810161190f818461487e565b6000806040838503121561494757614947600080fd5b600061495385856140e6565b9250506020614499858286016142e6565b805160e08301906149758482614682565b5060208201516149886020850182614182565b50604082015161499b6040850182614852565b5060608201516149ae60a085018261411a565b506080820151611f2660c0850182614182565b60006149cd8383614964565b505060e00190565b60006149df825190565b80845260209384019383018060005b83811015614a13578151614a0288826149c1565b9750602083019250506001016149ee565b509495945050505050565b6020808252810161190f81846149d5565b6101208082528101614a41818a6146e4565b9050614a506020830189614182565b614a5d6040830188614182565b614a6a6060830187614182565b614a776080830186614182565b614a8460a083018561411a565b614a9160c08301846147c4565b98975050505050505050565b805160c0830190614aae8482614682565b506020820151614ac16020850182614182565b506040820151614ad46040850182614182565b506060820151611f2660608501826147c4565b60c081016119128284614a9d565b60008060008060808587031215614b0e57614b0e600080fd5b6000614b1a87876140e6565b9450506020614b2b878288016140e6565b9350506040614b3c878288016140e6565b9250506060614b4d878288016140e6565b91505092959194509250565b60008060408385031215614b6f57614b6f600080fd5b823567ffffffffffffffff811115614b8957614b89600080fd5b614b958582860161426d565b925050602083013567ffffffffffffffff811115614bb557614bb5600080fd5b6144998582860161426d565b60608101614bcf8286614182565b614bdc6020830185614182565b6141126040830184614182565b60008060008060808587031215614c0257614c02600080fd5b6000614c0e87876140e6565b9450506020614c1f878288016140e6565b935050604085013567ffffffffffffffff811115614c3f57614c3f600080fd5b614b3c8782880161426d565b600061190f83836146e4565b6000614c61825190565b80845260208401935083602082028501614c7b8560200190565b8060005b85811015614cb05784840389528151614c988582614c4b565b94506020830160209a909a0199925050600101614c7f565b5091979650505050505050565b6000614cc7825190565b80845260209384019383018060005b83811015614a13578151614cea888261483e565b975060208301925050600101614cd6565b60408082528101614d0c8185614c57565b905081810360208301526141128184614cbd565b600381526000602082017f7573640000000000000000000000000000000000000000000000000000000000815291505b5060200190565b60408082528101614d6881846146e4565b9050818103602083015261190f81614d20565b600981526000602082017f53706f745072696365000000000000000000000000000000000000000000000081529150614d50565b60408082528101614dbf81614d7b565b9050818103602083015261190f81846146e4565b634e487b7160e01b600052601160045260246000fd5b8181038181111561191257611912614dd3565b8051611912816140d6565b600060208284031215614e1c57614e1c600080fd5b60006141128484614dfc565b634e487b7160e01b600052601260045260246000fd5b600082614e4d57614e4d614e28565b500490565b6000614e5f838584614220565b50500190565b6000614112828486614e52565b8183526000602084019350614e88838584614220565b601f19601f84011661470e565b60c08101614ea3828c614182565b8181036020830152614eb6818a8c614e72565b90508181036040830152614ecb81888a614e72565b9050614eda6060830187614182565b8181036080830152614eed818587614e72565b9050614efc60a0830184614182565b9a9950505050505050505050565b80516119128161455c565b600060208284031215614f2a57614f2a600080fd5b60006141128484614f0a565b818102808215838204851417614f4e57614f4e614dd3565b5092915050565b8082018082111561191257611912614dd3565b600881526000602082017f526f756e64204f6e00000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281614f68565b600e81526000602082017f21204f726967696e20436861696e00000000000000000000000000000000000081529150614d50565b6020808252810161191281614fac565b600e81526000602082017f21205469636b6574204f776e657200000000000000000000000000000000000081529150614d50565b6020808252810161191281614ff0565b600781526000602082017f436c61696d65640000000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615034565b600881526000602082017f212057696e6e657200000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615078565b604081016144b18285614182565b600080604083850312156150e0576150e0600080fd5b60006150ec8585614f0a565b925050602061449985828601614dfc565b634e487b7160e01b600052603260045260246000fd5b6000600019820361512657615126614dd3565b5060010190565b600d81526000602082017f526f756e6420506173736564210000000000000000000000000000000000000081529150614d50565b602080825281016119128161512d565b600c81526000602082017f456e74727920436c6f736564000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615171565b600881526000602082017f4e756d203e20333000000000000000000000000000000000000000000000000081529150614d50565b60208082528101611912816151b5565b600781526000602082017f4c6f772042616c0000000000000000000000000000000000000000000000000081529150614d50565b60208082528101611912816151f9565b601b81526000602082017f496e73756666696369656e742057616c6c65742042616c616e6365000000000081529150614d50565b602080825281016119128161523d565b600b81526000602082017f4d6178205469636b65747300000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615281565b608081016152d38289614182565b81810360208301526152e6818789614e72565b905081810360408301526152fb818587614e72565b9050610d0c6060830184614182565b601481526000602082017f696e73756666696369656e742062616c616e636500000000000000000000000081529150614d50565b602080825281016119128161530a565b600061191282614146565b600381526000602082017f216f6b000000000000000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615359565b604081016144b18285614682565b606081016153b98286614182565b6153c66020830185614182565b6141126040830184614682565b604081016153e18285614182565b818103602083015261411281846146e4565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061541d57607f821691505b60208210810361128c5761128c6153f3565b6060810161543d8286614682565b614bdc6020830185614682565b600e81526000602082017f5469636b657420436c61696d656400000000000000000000000000000000000081529150614d50565b602080825281016119128161544a565b600681526000602082017f57696e6e6572000000000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161548e565b60006154e061423a846141f5565b9050828152602081018484840111156154fb576154fb600080fd5b6142658482856146c0565b600082601f83011261551a5761551a600080fd5b81516141128482602086016154d2565b60008060006060848603121561554257615542600080fd5b600061554e8686614f0a565b935050602084015167ffffffffffffffff81111561556e5761556e600080fd5b61557a86828701615506565b92505060406145b586828701614dfc565b6000602082840312156155a0576155a0600080fd5b815167ffffffffffffffff8111156155ba576155ba600080fd5b61411284828501615506565b600681526000602082017f2141646d696e000000000000000000000000000000000000000000000000000081529150614d50565b60208082528101611912816155c6565b600981526000602082017f416e6e6f756e636564000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161560a565b600481526000602082017f2146564d0000000000000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161564e565b60006119128260601b90565b600061191282615692565b61411e6156b5826142cc565b61569e565b60006156c68286614182565b6020820191506156d682856156a9565b6014820191506156e68284614182565b506020019392505050565b60008261570057615700614e28565b500690565b60006119126141468381565b61571a83615705565b81546008840282811b60001990911b908116901990911617825550505050565b6000612aa1818484615711565b81811015612b485761575a60008261573a565b600101615747565b601f821115612aa1576000818152602090206020601f850104810160208510156157895750805b611d8d6020601f860104830182615747565b815167ffffffffffffffff8111156157b5576157b5614196565b6157bf8254615409565b6157ca828285615762565b6020601f8311600181146157fe57600084156157e65750858201515b600019600886021c19811660028602178655506137dd565b600085815260208120601f198616915b8281101561582e578885015182556020948501946001909201910161580e565b8683101561584a5784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b600981526000602082017f216465706c6f796572000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161585e565b600b81526000602082017f217375636365737366756c00000000000000000000000000000000000000000081529150614d50565b60208082528101611912816158a2565b8051611912816142dd565b60006020828403121561590657615906600080fd5b600061411284846158e6565b60008161592157615921614dd3565b506000190190565b600f81526000602082017f215370656369616c2043616c6c6572000000000000000000000000000000000081529150614d50565b6020808252810161191281615929565b6040810161597b8285614182565b6144be6020830184614682565b6003818060005b838110156137dd5781516159a3878261483e565b96506020830192505060010161598f565b61020081016159c3828b614182565b6159d0602083018a614682565b6159dd6040830189615988565b6159ea60a0830188614182565b6159f760c083018761411a565b615a0460e0830186614182565b615a12610100830185614182565b615a20610120830184614964565b9998505050505050505050565b60008060408385031215615a4357615a43600080fd5b6000614b9585856140e6565b60008060008060808587031215615a6857615a68600080fd5b6000615a748787614dfc565b9450506020615a8587828801614f0a565b9350506040615a9687828801614dfc565b9250506060614b4d878288016158e6565b6000615ab561423a846144c5565b90508060208402830185811115615ace57615ace600080fd5b835b818110156145315780615ae38882614dfc565b84525060209283019201615ad0565b600082601f830112615b0657615b06600080fd5b6003614112848285615aa7565b600060e08284031215615b2857615b28600080fd5b615b3260a06141d9565b90506000615b4084846158e6565b8252506020615b5184848301614dfc565b6020830152506040615b6584828501615af2565b60408301525060a0615b7984828501614f0a565b60608301525060c0615b8d84828501614dfc565b60808301525092915050565b600080600080600080600080610200898b031215615bb957615bb9600080fd5b6000615bc58b8b614dfc565b9850506020615bd68b828c016158e6565b9750506040615be78b828c01615af2565b96505060a0615bf88b828c01614dfc565b95505060c0615c098b828c01614f0a565b94505060e0615c1a8b828c01614dfc565b935050610100615c2c8b828c01614dfc565b925050610120615c3e8b828c01615b13565b9150509295985092959890939650565b60008060008060808587031215615c6757615c67600080fd5b6000615c738787614dfc565b9450506020615c8487828801614dfc565b9350506040615c9587828801614dfc565b925050606085015167ffffffffffffffff811115615cb557615cb5600080fd5b614b4d87828801615506565b60008060808385031215615cd757615cd7600080fd5b6000615ce38585614dfc565b925050602061449985828601615af2565b60008060408385031215615d0a57615d0a600080fd5b6000615d168585614dfc565b9250506020614499858286016158e6565b600080600060608486031215615d3f57615d3f600080fd5b6000615d4b8686614dfc565b9350506020615d5c86828701614dfc565b92505060406145b5868287016158e6565b60008154615d7a81615409565b808552602085019450600182168015615d9a5760018114615db057615dde565b60ff198316865260208215150286019350615dde565b60008581526020902060005b83811015615dd857815488820152600190910190602001615dbc565b87019450505b50505092915050565b60a08101615df58288614682565b8181036020830152615e078187615d6d565b90508181036040830152615e1b8186615d6d565b90508181036060830152615e2f81856146e4565b9050615e3e6080830184614682565b9695505050505050565b60608082528101615e598186615d6d565b90508181036020830152615e6d8185615d6d565b90508181036040830152610c6181846146e4565b60808101615e8f8287614182565b615e9c602083018661411a565b615ea96040830185614182565b610c616060830184614682565b60808101615ec48285614182565b6144be6020830184615988565b60808101615edf8287614182565b615eec6020830186614182565b615ef96040830185614182565b8181036060830152615e3e81846146e456fea26469706673582212203f6ce006a48842b035420cc2fadcf8d0a0407cd60155984db33cb86a26b56b9064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103855760003560e01c8063795688ca116101d1578063c5958af911610102578063de7c756e116100a0578063f78eea831161006f578063f78eea8314610b2e578063fa45cfdd14610b5d578063fcd4a54614610b7d578063ff5c04ce14610bab57600080fd5b8063de7c756e14610ac4578063e07c548614610ad9578063e59fef7c14610af9578063f66f49c314610b0e57600080fd5b8063ce5e11bf116100dc578063ce5e11bf14610a44578063d1813b3314610a64578063d5f3948814610a84578063d98c3c6514610aa457600080fd5b8063c5958af9146109c4578063cb288e8e146109e4578063cc3d967b14610a1757600080fd5b8063a0876f491161016f578063acb8b0c711610149578063acb8b0c71461093e578063ad898f5b14610982578063aebd823a14610998578063b5f597f3146109ae57600080fd5b8063a0876f49146108b9578063a792765f146108f1578063a8c44b231461091157600080fd5b80638527d58f116101ab5780638527d58f1461084b5780638a19c8bc1461086b57806392093527146108815780639bb6eb701461089757600080fd5b8063795688ca146107f65780637e5e219c1461082357806380c1442b1461083657600080fd5b806344e4e0f9116102b65780636a22d8cc1161025457806370ef05db1161022357806370ef05db1461072257806374cdb7111461074457806377b03e0d1461075757806377f372831461077757600080fd5b80636a22d8cc146106985780636a8054c1146106cc5780636abc4367146106ec5780636bfee4ea1461070c57600080fd5b8063491606581161029057806349160658146105c7578063491f3437146105e75780634c21b3691461065457806364ee3c6d1461066a57600080fd5b806344e4e0f91461057157806344e87f9114610591578063469a397b146105b157600080fd5b80631a98b2e011610323578063286db5c2116102fd578063286db5c2146104ee578063294490851461050e5780632af8aae01461053c57806342f5ac521461055c57600080fd5b80631a98b2e0146104a357806320eb5632146104c3578063276f4872146104d957600080fd5b806316f961b71161035f57806316f961b71461042b5780631840920114610441578063193b505b146104615780631959ad5b1461048357600080fd5b80630e39228814610391578063116191b6146103c757806315397a571461040857600080fd5b3661038c57005b600080fd5b34801561039d57600080fd5b506103b16103ac3660046140f1565b610bc0565b6040516103be9190614124565b60405180910390f35b3480156103d357600080fd5b506103fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516103be9190614174565b34801561041457600080fd5b5061041e600d5481565b6040516103be9190614188565b34801561043757600080fd5b5061041e60085481565b34801561044d57600080fd5b5061041e61045c366004614291565b610c6a565b34801561046d57600080fd5b5061048161047c3660046142f1565b610d17565b005b34801561048f57600080fd5b506000546103fb906001600160a01b031681565b3480156104af57600080fd5b506104816104be36600461435d565b610d4f565b3480156104cf57600080fd5b5061041e60055481565b3480156104e557600080fd5b5061041e610e4b565b3480156104fa57600080fd5b50610481610509366004614466565b610f49565b34801561051a57600080fd5b5061052e610529366004614466565b61116f565b6040516103be9291906144a3565b34801561054857600080fd5b506001546103fb906001600160a01b031681565b34801561056857600080fd5b5061041e611207565b34801561057d57600080fd5b5061048161058c36600461456f565b611292565b34801561059d57600080fd5b506103b16105ac366004614466565b611882565b3480156105bd57600080fd5b5061041e600b5481565b3480156105d357600080fd5b506104816105e23660046145bf565b611918565b3480156105f357600080fd5b50610644610602366004614466565b601460209081526000928352604080842090915290825290208054600182015460058301546006909301546001600160a01b0390921692909160ff9091169084565b6040516103be949392919061468b565b34801561066057600080fd5b5061041e600e5481565b34801561067657600080fd5b5061068a610685366004614466565b611a19565b6040516103be929190614718565b3480156106a457600080fd5b506103fb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d857600080fd5b506104816106e7366004614738565b611a72565b3480156106f857600080fd5b50610644610707366004614466565b611d94565b34801561071857600080fd5b5061041e60095481565b34801561072e57600080fd5b50610737611dea565b6040516103be919061477e565b61048161075236600461478f565b611e78565b34801561076357600080fd5b5061041e6107723660046140f1565b611f2c565b34801561078357600080fd5b506107e66107923660046142f1565b601360209081526000918252604091829020805460018201546002830154855160608101875260038501548152600485015495810195909552600590930154948401949094526001600160a01b0316929184565b6040516103be94939291906147fb565b34801561080257600080fd5b50600254610816906001600160a01b031681565b6040516103be9190614830565b34801561082f57600080fd5b504261041e565b34801561084257600080fd5b50610737611fb7565b34801561085757600080fd5b50610481610866366004614466565b611fc4565b34801561087757600080fd5b5061041e600c5481565b34801561088d57600080fd5b5061041e600a5481565b3480156108a357600080fd5b506108ac6121d4565b6040516103be9190614920565b3480156108c557600080fd5b5061041e6108d4366004614931565b601660209081526000928352604080842090915290825290205481565b3480156108fd57600080fd5b5061068a61090c366004614466565b612338565b34801561091d57600080fd5b5061093161092c3660046142f1565b6123d7565b6040516103be9190614a1e565b34801561094a57600080fd5b5061041e6109593660046142f1565b600c5460009081526016602090815260408083206001600160a01b039094168352929052205490565b34801561098e57600080fd5b5061041e60045481565b3480156109a457600080fd5b5061041e60075481565b3480156109ba57600080fd5b5061041e60065481565b3480156109d057600080fd5b506107376109df366004614466565b61261d565b3480156109f057600080fd5b50610a046109ff3660046140f1565b6126ae565b6040516103be9796959493929190614a2f565b348015610a2357600080fd5b50610a37610a323660046142f1565b612796565b6040516103be9190614ae7565b348015610a5057600080fd5b5061041e610a5f366004614466565b61280c565b348015610a7057600080fd5b50610481610a7f366004614af5565b612899565b348015610a9057600080fd5b50600354610816906001600160a01b031681565b348015610ab057600080fd5b50610481610abf366004614b59565b612a88565b348015610ad057600080fd5b50610481612aa6565b348015610ae557600080fd5b50610816610af4366004614466565b612b4c565b348015610b0557600080fd5b50610737612bd9565b348015610b1a57600080fd5b5061052e610b29366004614466565b612be6565b348015610b3a57600080fd5b50610b4e610b493660046140f1565b612da3565b6040516103be93929190614bc1565b348015610b6957600080fd5b50610481610b78366004614be9565b612e85565b348015610b8957600080fd5b50610b9d610b98366004614af5565b612f67565b6040516103be929190614cfb565b348015610bb757600080fd5b50610737613256565b600c54600090815260146020908152604080832084845290915280822081516060810192839052839290916002019060039082845b815481526020019060010190808311610bf5575050600c546000908152601560205260408082208151606081019283905296975091959450600590910192506003915082845b815481526020019060010190808311610c3b57505050505090506000610c618383613263565b95945050505050565b60008082604051602001610c7e9190614d57565b6040516020818303038152906040529050600081604051602001610ca29190614daf565b60408051601f1981840301815291905280516020820120909150600080610ccf8361090c6104b042614de9565b9150915080600003610ce8575060009695505050505050565b6402540be40082806020019051810190610d029190614e07565b610d0c9190614e3e565b979650505050505050565b6001546001600160a01b031615610d2d57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008585604051610d61929190614e65565b6040519081900381207f1876eed900000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed990610dde908e908e908e908e908e9089908d908d908d90600401614e95565b6020604051808303816000875af1158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190614f15565b610e3e57604051631403112d60e21b815260040160405180910390fd5b5050505050505050505050565b60008060156000600c5481526020019081526020016000206009016000015490506000670de0b6b3a764000082610e9c60405180604001604052806003815260200162199a5b60ea1b815250610c6a565b610ea69190614f36565b610eb09190614e3e565b9050600060156000600c5481526020019081526020016000206009016001015490506000670de0b6b3a764000082610f04604051806040016040528060058152602001646d6174696360d81b815250610c6a565b610f0e9190614f36565b610f189190614e3e565b90506000610f268285614f55565b90506064610f35826046614f36565b610f3f9190614e3e565b9550505050505090565b600c5460009081526015602052604090206008015460ff16610f865760405162461bcd60e51b8152600401610f7d90614f9c565b60405180910390fd5b600c5460009081526014602090815260408083208584529091529020600601544614610fc45760405162461bcd60e51b8152600401610f7d90614fe0565b600c5460009081526014602090815260408083208584529091529020546001600160a01b031633146110085760405162461bcd60e51b8152600401610f7d90615024565b600c54600090815260146020908152604080832085845290915290206005015460ff16156110485760405162461bcd60e51b8152600401610f7d90615068565b600061105383610bc0565b9050806110725760405162461bcd60e51b8152600401610f7d906150ac565b600061107c611207565b90506000611088610e4b565b905060006110968383614e3e565b905060006110c1604051806040016040528060068152602001653130b233b2b960d11b815250610c6a565b6110d383670de0b6b3a7640000614f36565b6110dd9190614e3e565b33600090815260136020526040812060050180549293508392909190611104908490614f55565b909155505033600090815260136020526040812060020180546001929061112c908490614f55565b9091555050600c5460009081526014602090815260408083208a84529091529020600501805460ff191660011790556111668133886132c9565b50505050505050565b600080546040517f2944908500000000000000000000000000000000000000000000000000000000815282916001600160a01b0316906329449085906111bb90879087906004016150bc565b6040805180830381865afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb91906150ca565b915091505b9250929050565b60008060005b600c5460009081526017602052604090205481101561128c57600c546000908152601760205260408120805483908110611249576112496150fd565b906000526020600020906007020160010154905061126681610bc0565b1561127957611276600184614f55565b92505b508061128481615113565b91505061120d565b50919050565b600c54600090815260156020526040902060030154428110156112c75760405162461bcd60e51b8152600401610f7d90615161565b600c5460009081526015602052604090206008015460ff16156112fc5760405162461bcd60e51b8152600401610f7d906151a5565b60005b600381101561135157601e85826003811061131c5761131c6150fd565b6020020151111561133f5760405162461bcd60e51b8152600401610f7d906151e9565b8061134981615113565b9150506112ff565b50600c54600090815260156020526040812060040154841561151257600454460361143c5761139a60405180604001604052806003815260200162199a5b60ea1b815250610c6a565b6113ac82670de0b6b3a7640000614f36565b6113b69190614e3e565b336000908152601360205260409020600301549092508211156113eb5760405162461bcd60e51b8152600401610f7d9061522d565b336000908152601360205260408120600301805484929061140d908490614de9565b9091555050600c5460009081526015602052604081206009018054849290611436908490614f55565b90915550505b600554460361150d5761146b604051806040016040528060058152602001646d6174696360d81b815250610c6a565b61147d82670de0b6b3a7640000614f36565b6114879190614e3e565b336000908152601360205260409020600401549092508211156114bc5760405162461bcd60e51b8152600401610f7d90615271565b33600090815260136020526040812060040180548492906114de908490614de9565b9091555050600c546000908152601560205260408120600a018054849290611507908490614f55565b90915550505b6115db565b611539604051806040016040528060068152602001653130b233b2b960d11b815250610c6a565b61154b82670de0b6b3a7640000614f36565b6115559190614e3e565b3360009081526013602052604090206005015490925082111561158a5760405162461bcd60e51b8152600401610f7d90615271565b33600090815260136020526040812060050180548492906115ac908490614de9565b9091555050600c546000908152601560205260408120600b0180548492906115d5908490614f55565b90915550505b600d54600c546000908152601660209081526040808320338452909152902054106116185760405162461bcd60e51b8152600401610f7d906152b5565b600c546000908152601560205260408120600201805460019190839061163f908490614f55565b91829055506040805160a08101825233815260208082018481528284018d8152600060608501819052466080860152600c5481526014845285812087825290935293909120825181546001600160a01b0319166001600160a01b039091161781559051600182015591519294509250906116bf9060028301906003613f4c565b50606082015160058201805460ff19169115159190911790556080909101516006909101553360009081526013602052604081206001908101805491929091611709908490614f55565b9091555050600c54600090815260176020908152604080832060148352818420858552835290832081546001818101845592855292909320835460079093020180546001600160a01b0319166001600160a01b03909316929092178255808301549082015561178060028083019084016003613f8a565b50600582810154908201805460ff191660ff9092161515919091179055600691820154910155600c54600090815260166020908152604080832033845290915281208054600192906117d3908490614f55565b9091555050600c546000818152601460209081526040808320858452825291829020825160a08101845281546001600160a01b03168152600182015492810192909252825160608101845261116694869433948e9446948f948d9490939291908301906002830160038282826020028201915b815481526020019060010190808311611846575050509183525050600582015460ff16151560208201526006909101546040909101528d61338e565b600080546040517f44e87f910000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906344e87f91906118ce90869086906004016150bc565b602060405180830381865afa1580156118eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190614f15565b90505b92915050565b6000828260405161192a929190614e65565b6040519081900381207f5f6970c300000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906119a1908b908b908b908b908b9089906004016152c5565b6020604051808303816000875af11580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e49190614f15565b611a0157604051631403112d60e21b815260040160405180910390fd5b611a0f87878787878761340e565b5050505050505050565b60606000806000611a2a8686612be6565b9150915081611a515760006040518060200160405280600081525090935093505050611200565b611a5b868261280c565b9250611a67868461261d565b935050509250929050565b6004548303611b4c5733600090815260136020526040902060030154821115611aad5760405162461bcd60e51b8152600401610f7d9061533e565b3360009081526013602052604081206003018054849290611acf908490614de9565b909155505060405160009033908490611ae79061534e565b60006040518083038185875af1925050503d8060008114611b24576040519150601f19603f3d011682016040523d82523d6000602084013e611b29565b606091505b5050905080611b4a5760405162461bcd60e51b8152600401610f7d9061538d565b505b6005548303611c265733600090815260136020526040902060040154821115611b875760405162461bcd60e51b8152600401610f7d9061533e565b3360009081526013602052604081206004018054849290611ba9908490614de9565b909155505060405160009033908490611bc19061534e565b60006040518083038185875af1925050503d8060008114611bfe576040519150601f19603f3d011682016040523d82523d6000602084013e611c03565b606091505b5050905080611c245760405162461bcd60e51b8152600401610f7d9061538d565b505b82600303611d175733600090815260136020526040902060050154821115611c605760405162461bcd60e51b8152600401610f7d9061533e565b3360009081526013602052604081206005018054849290611c82908490614de9565b90915550506002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb90611cd2903390869060040161539d565b6020604051808303816000875af1158015611cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d159190614f15565b505b6000838333604051602001611d2e939291906153ab565b60405160208183030381529060405290506000600b5482604051602001611d569291906153d3565b60405160208183030381529060405290506004544603611d7a57611d7a81846136d3565b6005544603611d8d57611d8d81846137e5565b5050505050565b60176020528160005260406000208181548110611db057600080fd5b600091825260209091206007909102018054600182015460058301546006909301546001600160a01b039092169450925060ff9091169084565b60118054611df790615409565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2390615409565b8015611e705780601f10611e4557610100808354040283529160200191611e70565b820191906000526020600020905b815481529060010190602001808311611e5357829003601f168201915b505050505081565b60008215611e87575034611f1a565b506002546040517f23b872dd00000000000000000000000000000000000000000000000000000000815284916001600160a01b0316906323b872dd90611ed59033903090869060040161542f565b6020604051808303816000875af1158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190614f15565b505b611f26818433856138c1565b50505050565b600080546040517f77b03e0d0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906377b03e0d90611f76908590600401614188565b602060405180830381865afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119129190614e07565b60128054611df790615409565b600c5460009081526015602052604090206008015460ff16611ff85760405162461bcd60e51b8152600401610f7d90614f9c565b600c54600090815260146020908152604080832085845290915290206006015446146120365760405162461bcd60e51b8152600401610f7d90614fe0565b600c5460009081526014602090815260408083208584529091529020546001600160a01b0316331461207a5760405162461bcd60e51b8152600401610f7d90615024565b600c54600090815260146020908152604080832085845290915290206005015460ff16156120ba5760405162461bcd60e51b8152600401610f7d9061547e565b60006120c583610bc0565b905080156120e55760405162461bcd60e51b8152600401610f7d906154c2565b600060156000600c548152602001908152602001600020600401549050600061212b604051806040016040528060068152602001653130b233b2b960d11b815250610c6a565b61213d83670de0b6b3a7640000614f36565b6121479190614e3e565b9050606461215682601e614f36565b6121609190614e3e565b3360009081526013602052604081206005018054909190612182908490614f55565b9091555050600c5460009081526014602090815260408083208884529091529020600501805460ff19166001179055611d8d60646121c183601e614f36565b6121cb9190614e3e565b600033876138c1565b6121dc613fb5565b600c54600090815260156020526040908190208151610100810190925280548290829061220890615409565b80601f016020809104026020016040519081016040528092919081815260200182805461223490615409565b80156122815780601f1061225657610100808354040283529160200191612281565b820191906000526020600020905b81548152906001019060200180831161226457829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582016003806020026040519081016040528092919082600380156122ee576020028201915b8154815260200190600101908083116122da575b5050509183525050600882015460ff1615156020808301919091526040805160608101825260098501548152600a85015492810192909252600b9093015481840152910152919050565b600080546040517fa792765f000000000000000000000000000000000000000000000000000000008152606092916001600160a01b03169063a792765f9061238690879087906004016150bc565b600060405180830381865afa1580156123a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123cb919081019061552a565b90969095509350505050565b60606000805b600c5460009081526017602052604090205481101561246557836001600160a01b031660176000600c5481526020019081526020016000208281548110612426576124266150fd565b60009182526020909120600790910201546001600160a01b031603612453578161244f81615113565b9250505b8061245d81615113565b9150506123dd565b5060008167ffffffffffffffff81111561248157612481614196565b6040519080825280602002602001820160405280156124ba57816020015b6124a7614023565b81526020019060019003908161249f5790505b5090506000805b600c5460009081526017602052604090205481101561261357856001600160a01b031660176000600c548152602001908152602001600020828154811061250a5761250a6150fd565b60009182526020909120600790910201546001600160a01b0316036125f457600c54600090815260176020526040902080548290811061254c5761254c6150fd565b60009182526020918290206040805160a08101825260079390930290910180546001600160a01b0316835260018101549383019390935280516060810180835292939291840191600284019060039082845b81548152602001906001019080831161259e575050509183525050600582015460ff161515602082015260069091015460409091015283518490849081106125e8576125e86150fd565b60200260200101819052505b6125ff600183614f55565b91508061260b81615113565b9150506124c1565b5090949350505050565b6000546040517fc5958af90000000000000000000000000000000000000000000000000000000081526060916001600160a01b03169063c5958af99061266990869086906004016150bc565b600060405180830381865afa158015612686573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261190f919081019061558b565b6015602052600090815260409020805481906126c990615409565b80601f01602080910402602001604051908101604052809291908181526020018280546126f590615409565b80156127425780601f1061271757610100808354040283529160200191612742565b820191906000526020600020905b81548152906001019060200180831161272557829003601f168201915b50505050600183015460028401546003850154600486015460088701546040805160608101825260098a01548152600a8a01546020820152600b9099015490890152959693959294509092909160ff169087565b61279e614056565b506001600160a01b03908116600090815260136020908152604091829020825160808101845281549094168452600181015484830152600281015484840152825160608181018552600383015482526004830154938201939093526005909101549281019290925282015290565b600080546040517fce5e11bf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063ce5e11bf9061285890869086906004016150bc565b602060405180830381865afa158015612875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190614e07565b6003546001600160a01b031633146128c35760405162461bcd60e51b8152600401610f7d906155fa565b600c5460009081526015602052604090206008015460ff16156128f85760405162461bcd60e51b8152600401610f7d9061563e565b600c5460009081526015602052604090206003015442101561292c5760405162461bcd60e51b8152600401610f7d90614f9c565b600454461461294d5760405162461bcd60e51b8152600401610f7d90615682565b6000601e600e543387604051602001612968939291906156ba565b6040516020818303038152906040528051906020012060001c61298b91906156f1565b90506000601e600e5433876040516020016129a8939291906156ba565b6040516020818303038152906040528051906020012060001c6129cb91906156f1565b90506000601e600e5433876040516020016129e8939291906156ba565b6040516020818303038152906040528051906020012060001c612a0b91906156f1565b600c80546000908152601560208181526040808420600801805460ff191660011790558051606081018252898152808301899052808201879052945484529190529020919250612a6091600501906003613f4c565b50611166600c5460405180606001604052808681526020018581526020018481525086613a6c565b6011612a94838261579b565b506012612aa1828261579b565b505050565b6003546001600160a01b03163314612ad05760405162461bcd60e51b8152600401610f7d90615892565b604051479060009033908390612ae59061534e565b60006040518083038185875af1925050503d8060008114612b22576040519150601f19603f3d011682016040523d82523d6000602084013e612b27565b606091505b5050905080612b485760405162461bcd60e51b8152600401610f7d906158d6565b5050565b600080546040517fe07c54860000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e07c548690612b9890869086906004016150bc565b602060405180830381865afa158015612bb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f91906158f1565b60108054611df790615409565b6000806000612bf485611f2c565b905080600003612c0b576000809250925050611200565b80612c1581615912565b9150600190506000808381612c2a8a8361280c565b9050888111612c455760008097509750505050505050611200565b612c4f8a8461280c565b905088811115612c5e57600094505b8415612d0e576002612c708484614f55565b612c7a9190614e3e565b9350612c868a8561280c565b905088811115612cc7576000612ca18b610a5f600188614de9565b9050898111612cb35760009550612cc1565b612cbe600186614de9565b92505b50612c5e565b6000612cd88b610a5f876001614f55565b905089811115612cfb576000955084612cf081615113565b955050809150612cc1565b612d06856001614f55565b935050612c5e565b612d188a82611882565b612d2e5760018497509750505050505050611200565b612d388a82611882565b8015612d4357508584105b15612d665783612d5281615113565b945050612d5f8a8561280c565b9050612d2e565b8584148015612d7a5750612d7a8a82611882565b15612d915760008097509750505050505050611200565b60018497509750505050505050611200565b6001546040517f87a475fd0000000000000000000000000000000000000000000000000000000081526000918291829182916001600160a01b03909116906387a475fd90612df5908890600401614188565b602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614e07565b90506060612e498261090c426001614f55565b945090506000849003612e69576000806101949450945094505050612e7e565b6000612e7482613aa9565b955060c893505050505b9193909250565b6003546001600160a01b03163314612eaf5760405162461bcd60e51b8152600401610f7d9061595d565b600c54600090815260156020526040902060030154421015612ee35760405162461bcd60e51b8152600401610f7d90614f9c565b6001600c6000828254612ef69190614f55565b9091555050600c5460008181526015602052604090206001810191909155600401839055612f248442614f55565b600c8054600090815260156020526040808220600301939093559054815220612f4d838261579b565b50600c54611f2690612f5f4287614f55565b858585613afa565b606080600080612f7b88610b29888a614de9565b9150915081612fcc576040805160008082526020820190925290612faf565b6060815260200190600190039081612f9a5790505b50604080516000815260208101909152909450925061324d915050565b6000612fd8898961116f565b90935090508261302b57604080516000808252602082019092529061300d565b6060815260200190600190039081612ff85790505b50604080516000815260208101909152909550935061324d92505050565b60008060008867ffffffffffffffff81111561304957613049614196565b604051908082528060200260200182016040528015613072578160200160208202803683370190505b5090505b88831080156130995750848261308d866001614f55565b6130979190614de9565b115b156130fd5760006130ae8d610a5f8588614de9565b90506130ba8d82611882565b6130ea57808285815181106130d1576130d16150fd565b6020908102919091010152836130e681615113565b9450505b826130f481615113565b93505050613076565b60008367ffffffffffffffff81111561311857613118614196565b60405190808252806020026020018201604052801561314b57816020015b60608152602001906001900390816131365790505b50905060008467ffffffffffffffff81111561316957613169614196565b604051908082528060200260200182016040528015613192578160200160208202803683370190505b50905060005b858110156132405783816131ad600189614de9565b6131b79190614de9565b815181106131c7576131c76150fd565b60200260200101518282815181106131e1576131e16150fd565b6020026020010181815250506132108f838381518110613203576132036150fd565b602002602001015161261d565b838281518110613222576132226150fd565b6020026020010181905250808061323890615113565b915050613198565b5090985096505050505050505b94509492505050565b600f8054611df790615409565b6000805b60038110156132bf57828160038110613282576132826150fd565b6020020151848260038110613299576132996150fd565b6020020151146132ad576000915050611912565b806132b781615113565b915050613267565b5060019392505050565b600454460361332d57600083836040516020016132e792919061596d565b60405160208183030381529060405290506000600a548260405160200161330f9291906153d3565b604051602081830303815290604052905061332a81846136d3565b50505b6005544603612aa1576000838360405160200161334b92919061596d565b60405160208183030381529060405290506000600a54826040516020016133739291906153d3565b6040516020818303038152906040529050611d8d81846137e5565b600089898989898989896040516020016133af9897969594939291906159b4565b60405160208183030381529060405290506000600754826040516020016133d79291906153d3565b604051602081830303815290604052905060045446036133fb576133fb81846136d3565b6005544603610e3e57610e3e81846137e5565b60008061341d83850185615a2d565b91509150600654820361345d57600080600080848060200190518101906134449190615a4f565b935093509350935061345884848484613b72565b505050505b60075482036134af57600080600080600080600080888060200190518101906134869190615b99565b975097509750975097509750975097506134a68888888888888888613c63565b50505050505050505b600854820361351457600080600080848060200190518101906134d29190615c4e565b600c84905560008481526015602052604090206001810185905560048101839055600381018490559397509195509350915061350e828261579b565b50505050505b600954820361356957600080828060200190518101906135349190615cc1565b600082815260156020526040902060088101805460ff19166001179055919350915061356590600501826003613f4c565b5050505b600a5482036135f257600080828060200190518101906135899190615cf4565b6001600160a01b0381166000908152601360205260408120600501805493955091935084926135b9908490614f55565b90915550506001600160a01b03811660009081526013602052604081206002018054600192906135ea908490614f55565b909155505050505b600b548203611a0f576000806000838060200190518101906136149190615d27565b9250925092506004548303613654576001600160a01b0381166000908152601360205260408120600301805484929061364e908490614de9565b90915550505b600554830361368e576001600160a01b03811660009081526013602052604081206004018054849290613688908490614de9565b90915550505b82600303610e3e576001600160a01b038116600090815260136020526040812060050180548492906136c1908490614de9565b90915550505050505050505050505050565b604051630c93e3bb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb90839061372b90309060109060129089908490600401615de7565b6000604051808303818588803b15801561374457600080fd5b505af1158015613758573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350631c92115f92506137af91506010906012908790600401615e48565b600060405180830381600087803b1580156137c957600080fd5b505af11580156137dd573d6000803e3d6000fd5b505050505050565b604051630c93e3bb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb90839061383d903090600f9060119089908490600401615de7565b6000604051808303818588803b15801561385657600080fd5b505af115801561386a573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350631c92115f92506137af9150600f906011908790600401615e48565b6004544603613998578215613906576001600160a01b038216600090815260136020526040812060030180548692906138fb908490614f55565b909155506139379050565b6001600160a01b03821660009081526013602052604081206005018054869290613931908490614f55565b90915550505b60006004548486856040516020016139529493929190615e81565b604051602081830303815290604052905060006006548260405160200161397a9291906153d3565b604051602081830303815290604052905061399581846136d3565b50505b6005544603611f265782156139dd576001600160a01b038216600090815260136020526040812060040180548692906139d2908490614f55565b90915550613a0e9050565b6001600160a01b03821660009081526013602052604081206005018054869290613a08908490614f55565b90915550505b6000600454848685604051602001613a299493929190615e81565b6040516020818303038152906040529050600060065482604051602001613a519291906153d3565b60405160208183030381529060405290506137dd81846137e5565b60008383604051602001613a81929190615eb6565b6040516020818303038152906040529050600060095482604051602001611d569291906153d3565b6000805b825181101561128c57828181518110613ac857613ac86150fd565b016020015160f81c613adc83610100614f36565b613ae69190614f55565b915080613af281615113565b915050613aad565b600085858585604051602001613b139493929190615ed1565b6040516020818303038152906040529050600060085482604051602001613b3b9291906153d3565b60405160208183030381529060405290506004544603613b5f57613b5f81846136d3565b60055446036111665761116681846137e5565b6004548403613be8578215613bb7576001600160a01b03811660009081526013602052604081206003018054849290613bac908490614f55565b90915550613be89050565b6001600160a01b03811660009081526013602052604081206005018054849290613be2908490614f55565b90915550505b6005548403611f26578215613c2d576001600160a01b03811660009081526013602052604081206004018054849290613c22908490614f55565b90915550611f269050565b6001600160a01b03811660009081526013602052604081206005018054849290613c58908490614f55565b909155505050505050565b8315613d2e576004548503613cc9576001600160a01b03871660009081526013602052604081206003018054859290613c9d908490614de9565b909155505060008281526015602052604081206009018054859290613cc3908490614f55565b90915550505b6005548503613d29576001600160a01b03871660009081526013602052604081206004018054859290613cfd908490614de9565b90915550506000828152601560205260408120600a018054859290613d23908490614f55565b90915550505b613d85565b6001600160a01b03871660009081526013602052604081206005018054859290613d59908490614de9565b90915550506000828152601560205260408120600b018054859290613d7f908490614f55565b90915550505b6000828152601560205260408120600201805460019290613da7908490614f55565b90915550506040805160a0810182526001600160a01b03898116825260208083018c81528385018b8152600060608601819052608086018c9052888152601484528681208f825290935294909120835181546001600160a01b03191693169290921782555160018201559151909190613e269060028301906003613f4c565b50606082015160058201805460ff19169115159190911790556080909101516006909101556001600160a01b03871660009081526013602052604081206001908101805491929091613e79908490614f55565b9091555050600082815260176020908152604080832080546001808201835591855293839020855160079095020180546001600160a01b0319166001600160a01b039095169490941784559184015191830191909155820151829190613ee59060028301906003613f4c565b50606082015160058201805460ff191691151591909117905560809091015160069091015560008281526016602090815260408083206001600160a01b038b1684529091528120805460019290613f3d908490614f55565b90915550505050505050505050565b8260038101928215613f7a579160200282015b82811115613f7a578251825591602001919060010190613f5f565b50613f869291506140a3565b5090565b8260038101928215613f7a579182015b82811115613f7a578254825591600101919060010190613f9a565b6040518061010001604052806060815260200160008152602001600081526020016000815260200160008152602001613fec6140b8565b815260200160001515815260200161401e60405180606001604052806000815260200160008152602001600081525090565b905290565b6040805160a081018252600080825260208201529081016140426140b8565b815260006020820181905260409091015290565b604051806080016040528060006001600160a01b03168152602001600081526020016000815260200161401e60405180606001604052806000815260200160008152602001600081525090565b5b80821115613f8657600081556001016140a4565b60405180606001604052806003906020820280368337509192915050565b805b81146140e357600080fd5b50565b8035611912816140d6565b60006020828403121561410657614106600080fd5b600061411284846140e6565b949350505050565b8015155b82525050565b60208101611912828461411a565b60006119126001600160a01b038316614149565b90565b6001600160a01b031690565b600061191282614132565b600061191282614155565b61411e81614160565b60208101611912828461416b565b8061411e565b602081016119128284614182565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156141d2576141d2614196565b6040525050565b60006141e460405190565b90506141f082826141ac565b919050565b600067ffffffffffffffff82111561420f5761420f614196565b601f19601f83011660200192915050565b82818337506000910152565b600061423f61423a846141f5565b6141d9565b90508281526020810184848401111561425a5761425a600080fd5b614265848285614220565b509392505050565b600082601f83011261428157614281600080fd5b813561411284826020860161422c565b6000602082840312156142a6576142a6600080fd5b813567ffffffffffffffff8111156142c0576142c0600080fd5b6141128482850161426d565b60006001600160a01b038216611912565b6140d8816142cc565b8035611912816142dd565b60006020828403121561430657614306600080fd5b600061411284846142e6565b60008083601f84011261432757614327600080fd5b50813567ffffffffffffffff81111561434257614342600080fd5b60208301915083600182028301111561120057611200600080fd5b60008060008060008060008060008060c08b8d03121561437f5761437f600080fd5b600061438b8d8d6140e6565b9a505060208b013567ffffffffffffffff8111156143ab576143ab600080fd5b6143b78d828e01614312565b995099505060408b013567ffffffffffffffff8111156143d9576143d9600080fd5b6143e58d828e01614312565b975097505060608b013567ffffffffffffffff81111561440757614407600080fd5b6144138d828e01614312565b955095505060808b013567ffffffffffffffff81111561443557614435600080fd5b6144418d828e01614312565b935093505060a06144548d828e016140e6565b9150509295989b9194979a5092959850565b6000806040838503121561447c5761447c600080fd5b600061448885856140e6565b9250506020614499858286016140e6565b9150509250929050565b604081016144b1828561411a565b6144be6020830184614182565b9392505050565b600067ffffffffffffffff8211156144df576144df614196565b5060200290565b60006144f461423a846144c5565b9050806020840283018581111561450d5761450d600080fd5b835b81811015614531578061452288826140e6565b8452506020928301920161450f565b5050509392505050565b600082601f83011261454f5761454f600080fd5b60036141128482856144e6565b8015156140d8565b80356119128161455c565b600080600060a0848603121561458757614587600080fd5b6000614593868661453b565b93505060606145a486828701614564565b92505060806145b5868287016140e6565b9150509250925092565b60008060008060008060006080888a0312156145dd576145dd600080fd5b60006145e98a8a6140e6565b975050602088013567ffffffffffffffff81111561460957614609600080fd5b6146158a828b01614312565b9650965050604088013567ffffffffffffffff81111561463757614637600080fd5b6146438a828b01614312565b9450945050606088013567ffffffffffffffff81111561466557614665600080fd5b6146718a828b01614312565b925092505092959891949750929550565b61411e816142cc565b608081016146998287614682565b6146a66020830186614182565b6146b3604083018561411a565b610c616060830184614182565b60005b838110156146db5781810151838201526020016146c3565b50506000910152565b60006146ee825190565b8084526020840193506147058185602086016146c0565b601f19601f8201165b9093019392505050565b6040808252810161472981856146e4565b90506144be6020830184614182565b60008060006060848603121561475057614750600080fd5b600061475c86866140e6565b935050602061476d868287016140e6565b92505060406145b5868287016140e6565b6020808252810161190f81846146e4565b6000806000606084860312156147a7576147a7600080fd5b60006147b386866140e6565b935050602061476d86828701614564565b805160608301906147d58482614182565b5060208201516147e86020850182614182565b506040820151611f266040850182614182565b60c081016148098287614682565b6148166020830186614182565b6148236040830185614182565b610c6160608301846147c4565b602081016119128284614682565b600061484a8383614182565b505060200190565b6003818060005b838110156137dd57815161486d878261483e565b965060208301925050600101614859565b80516101808084526000919084019061489782826146e4565b91505060208301516148ac6020860182614182565b5060408301516148bf6040860182614182565b5060608301516148d26060860182614182565b5060808301516148e56080860182614182565b5060a08301516148f860a0860182614852565b5060c083015161490c61010086018261411a565b5060e08301516142656101208601826147c4565b6020808252810161190f818461487e565b6000806040838503121561494757614947600080fd5b600061495385856140e6565b9250506020614499858286016142e6565b805160e08301906149758482614682565b5060208201516149886020850182614182565b50604082015161499b6040850182614852565b5060608201516149ae60a085018261411a565b506080820151611f2660c0850182614182565b60006149cd8383614964565b505060e00190565b60006149df825190565b80845260209384019383018060005b83811015614a13578151614a0288826149c1565b9750602083019250506001016149ee565b509495945050505050565b6020808252810161190f81846149d5565b6101208082528101614a41818a6146e4565b9050614a506020830189614182565b614a5d6040830188614182565b614a6a6060830187614182565b614a776080830186614182565b614a8460a083018561411a565b614a9160c08301846147c4565b98975050505050505050565b805160c0830190614aae8482614682565b506020820151614ac16020850182614182565b506040820151614ad46040850182614182565b506060820151611f2660608501826147c4565b60c081016119128284614a9d565b60008060008060808587031215614b0e57614b0e600080fd5b6000614b1a87876140e6565b9450506020614b2b878288016140e6565b9350506040614b3c878288016140e6565b9250506060614b4d878288016140e6565b91505092959194509250565b60008060408385031215614b6f57614b6f600080fd5b823567ffffffffffffffff811115614b8957614b89600080fd5b614b958582860161426d565b925050602083013567ffffffffffffffff811115614bb557614bb5600080fd5b6144998582860161426d565b60608101614bcf8286614182565b614bdc6020830185614182565b6141126040830184614182565b60008060008060808587031215614c0257614c02600080fd5b6000614c0e87876140e6565b9450506020614c1f878288016140e6565b935050604085013567ffffffffffffffff811115614c3f57614c3f600080fd5b614b3c8782880161426d565b600061190f83836146e4565b6000614c61825190565b80845260208401935083602082028501614c7b8560200190565b8060005b85811015614cb05784840389528151614c988582614c4b565b94506020830160209a909a0199925050600101614c7f565b5091979650505050505050565b6000614cc7825190565b80845260209384019383018060005b83811015614a13578151614cea888261483e565b975060208301925050600101614cd6565b60408082528101614d0c8185614c57565b905081810360208301526141128184614cbd565b600381526000602082017f7573640000000000000000000000000000000000000000000000000000000000815291505b5060200190565b60408082528101614d6881846146e4565b9050818103602083015261190f81614d20565b600981526000602082017f53706f745072696365000000000000000000000000000000000000000000000081529150614d50565b60408082528101614dbf81614d7b565b9050818103602083015261190f81846146e4565b634e487b7160e01b600052601160045260246000fd5b8181038181111561191257611912614dd3565b8051611912816140d6565b600060208284031215614e1c57614e1c600080fd5b60006141128484614dfc565b634e487b7160e01b600052601260045260246000fd5b600082614e4d57614e4d614e28565b500490565b6000614e5f838584614220565b50500190565b6000614112828486614e52565b8183526000602084019350614e88838584614220565b601f19601f84011661470e565b60c08101614ea3828c614182565b8181036020830152614eb6818a8c614e72565b90508181036040830152614ecb81888a614e72565b9050614eda6060830187614182565b8181036080830152614eed818587614e72565b9050614efc60a0830184614182565b9a9950505050505050505050565b80516119128161455c565b600060208284031215614f2a57614f2a600080fd5b60006141128484614f0a565b818102808215838204851417614f4e57614f4e614dd3565b5092915050565b8082018082111561191257611912614dd3565b600881526000602082017f526f756e64204f6e00000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281614f68565b600e81526000602082017f21204f726967696e20436861696e00000000000000000000000000000000000081529150614d50565b6020808252810161191281614fac565b600e81526000602082017f21205469636b6574204f776e657200000000000000000000000000000000000081529150614d50565b6020808252810161191281614ff0565b600781526000602082017f436c61696d65640000000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615034565b600881526000602082017f212057696e6e657200000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615078565b604081016144b18285614182565b600080604083850312156150e0576150e0600080fd5b60006150ec8585614f0a565b925050602061449985828601614dfc565b634e487b7160e01b600052603260045260246000fd5b6000600019820361512657615126614dd3565b5060010190565b600d81526000602082017f526f756e6420506173736564210000000000000000000000000000000000000081529150614d50565b602080825281016119128161512d565b600c81526000602082017f456e74727920436c6f736564000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615171565b600881526000602082017f4e756d203e20333000000000000000000000000000000000000000000000000081529150614d50565b60208082528101611912816151b5565b600781526000602082017f4c6f772042616c0000000000000000000000000000000000000000000000000081529150614d50565b60208082528101611912816151f9565b601b81526000602082017f496e73756666696369656e742057616c6c65742042616c616e6365000000000081529150614d50565b602080825281016119128161523d565b600b81526000602082017f4d6178205469636b65747300000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615281565b608081016152d38289614182565b81810360208301526152e6818789614e72565b905081810360408301526152fb818587614e72565b9050610d0c6060830184614182565b601481526000602082017f696e73756666696369656e742062616c616e636500000000000000000000000081529150614d50565b602080825281016119128161530a565b600061191282614146565b600381526000602082017f216f6b000000000000000000000000000000000000000000000000000000000081529150614d50565b6020808252810161191281615359565b604081016144b18285614682565b606081016153b98286614182565b6153c66020830185614182565b6141126040830184614682565b604081016153e18285614182565b818103602083015261411281846146e4565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061541d57607f821691505b60208210810361128c5761128c6153f3565b6060810161543d8286614682565b614bdc6020830185614682565b600e81526000602082017f5469636b657420436c61696d656400000000000000000000000000000000000081529150614d50565b602080825281016119128161544a565b600681526000602082017f57696e6e6572000000000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161548e565b60006154e061423a846141f5565b9050828152602081018484840111156154fb576154fb600080fd5b6142658482856146c0565b600082601f83011261551a5761551a600080fd5b81516141128482602086016154d2565b60008060006060848603121561554257615542600080fd5b600061554e8686614f0a565b935050602084015167ffffffffffffffff81111561556e5761556e600080fd5b61557a86828701615506565b92505060406145b586828701614dfc565b6000602082840312156155a0576155a0600080fd5b815167ffffffffffffffff8111156155ba576155ba600080fd5b61411284828501615506565b600681526000602082017f2141646d696e000000000000000000000000000000000000000000000000000081529150614d50565b60208082528101611912816155c6565b600981526000602082017f416e6e6f756e636564000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161560a565b600481526000602082017f2146564d0000000000000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161564e565b60006119128260601b90565b600061191282615692565b61411e6156b5826142cc565b61569e565b60006156c68286614182565b6020820191506156d682856156a9565b6014820191506156e68284614182565b506020019392505050565b60008261570057615700614e28565b500690565b60006119126141468381565b61571a83615705565b81546008840282811b60001990911b908116901990911617825550505050565b6000612aa1818484615711565b81811015612b485761575a60008261573a565b600101615747565b601f821115612aa1576000818152602090206020601f850104810160208510156157895750805b611d8d6020601f860104830182615747565b815167ffffffffffffffff8111156157b5576157b5614196565b6157bf8254615409565b6157ca828285615762565b6020601f8311600181146157fe57600084156157e65750858201515b600019600886021c19811660028602178655506137dd565b600085815260208120601f198616915b8281101561582e578885015182556020948501946001909201910161580e565b8683101561584a5784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b600981526000602082017f216465706c6f796572000000000000000000000000000000000000000000000081529150614d50565b602080825281016119128161585e565b600b81526000602082017f217375636365737366756c00000000000000000000000000000000000000000081529150614d50565b60208082528101611912816158a2565b8051611912816142dd565b60006020828403121561590657615906600080fd5b600061411284846158e6565b60008161592157615921614dd3565b506000190190565b600f81526000602082017f215370656369616c2043616c6c6572000000000000000000000000000000000081529150614d50565b6020808252810161191281615929565b6040810161597b8285614182565b6144be6020830184614682565b6003818060005b838110156137dd5781516159a3878261483e565b96506020830192505060010161598f565b61020081016159c3828b614182565b6159d0602083018a614682565b6159dd6040830189615988565b6159ea60a0830188614182565b6159f760c083018761411a565b615a0460e0830186614182565b615a12610100830185614182565b615a20610120830184614964565b9998505050505050505050565b60008060408385031215615a4357615a43600080fd5b6000614b9585856140e6565b60008060008060808587031215615a6857615a68600080fd5b6000615a748787614dfc565b9450506020615a8587828801614f0a565b9350506040615a9687828801614dfc565b9250506060614b4d878288016158e6565b6000615ab561423a846144c5565b90508060208402830185811115615ace57615ace600080fd5b835b818110156145315780615ae38882614dfc565b84525060209283019201615ad0565b600082601f830112615b0657615b06600080fd5b6003614112848285615aa7565b600060e08284031215615b2857615b28600080fd5b615b3260a06141d9565b90506000615b4084846158e6565b8252506020615b5184848301614dfc565b6020830152506040615b6584828501615af2565b60408301525060a0615b7984828501614f0a565b60608301525060c0615b8d84828501614dfc565b60808301525092915050565b600080600080600080600080610200898b031215615bb957615bb9600080fd5b6000615bc58b8b614dfc565b9850506020615bd68b828c016158e6565b9750506040615be78b828c01615af2565b96505060a0615bf88b828c01614dfc565b95505060c0615c098b828c01614f0a565b94505060e0615c1a8b828c01614dfc565b935050610100615c2c8b828c01614dfc565b925050610120615c3e8b828c01615b13565b9150509295985092959890939650565b60008060008060808587031215615c6757615c67600080fd5b6000615c738787614dfc565b9450506020615c8487828801614dfc565b9350506040615c9587828801614dfc565b925050606085015167ffffffffffffffff811115615cb557615cb5600080fd5b614b4d87828801615506565b60008060808385031215615cd757615cd7600080fd5b6000615ce38585614dfc565b925050602061449985828601615af2565b60008060408385031215615d0a57615d0a600080fd5b6000615d168585614dfc565b9250506020614499858286016158e6565b600080600060608486031215615d3f57615d3f600080fd5b6000615d4b8686614dfc565b9350506020615d5c86828701614dfc565b92505060406145b5868287016158e6565b60008154615d7a81615409565b808552602085019450600182168015615d9a5760018114615db057615dde565b60ff198316865260208215150286019350615dde565b60008581526020902060005b83811015615dd857815488820152600190910190602001615dbc565b87019450505b50505092915050565b60a08101615df58288614682565b8181036020830152615e078187615d6d565b90508181036040830152615e1b8186615d6d565b90508181036060830152615e2f81856146e4565b9050615e3e6080830184614682565b9695505050505050565b60608082528101615e598186615d6d565b90508181036020830152615e6d8185615d6d565b90508181036040830152610c6181846146e4565b60808101615e8f8287614182565b615e9c602083018661411a565b615ea96040830185614182565b610c616060830184614682565b60808101615ec48285614182565b6144be6020830184615988565b60808101615edf8287614182565b615eec6020830186614182565b615ef96040830185614182565b8181036060830152615e3e81846146e456fea26469706673582212203f6ce006a48842b035420cc2fadcf8d0a0407cd60155984db33cb86a26b56b9064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getDataAfter(bytes32,uint256)": {
        "details": "Retrieves the next value for the queryId after the specified timestamp",
        "params": {
          "_queryId": "is the queryId to look up the value for",
          "_timestamp": "after which to search for next value"
        },
        "returns": {
          "_timestampRetrieved": "the value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getDataBefore(bytes32,uint256)": {
        "details": "Retrieves the latest value for the queryId before the specified timestamp",
        "params": {
          "_queryId": "is the queryId to look up the value for",
          "_timestamp": "before which to search for latest value"
        },
        "returns": {
          "_timestampRetrieved": "the value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getIndexForDataAfter(bytes32,uint256)": {
        "details": "Retrieves latest array index of data before the specified timestamp for the queryId",
        "params": {
          "_queryId": "is the queryId to look up the index for",
          "_timestamp": "is the timestamp before which to search for the latest index"
        },
        "returns": {
          "_found": "whether the index was found",
          "_index": "the latest index found before the specified timestamp"
        }
      },
      "getIndexForDataBefore(bytes32,uint256)": {
        "details": "Retrieves latest array index of data before the specified timestamp for the queryId",
        "params": {
          "_queryId": "is the queryId to look up the index for",
          "_timestamp": "is the timestamp before which to search for the latest index"
        },
        "returns": {
          "_found": "whether the index was found",
          "_index": "the latest index found before the specified timestamp"
        }
      },
      "getMultipleValuesBefore(bytes32,uint256,uint256,uint256)": {
        "details": "Retrieves multiple uint256 values before the specified timestamp",
        "params": {
          "_maxAge": "the maximum number of seconds before the _timestamp to search for values",
          "_maxCount": "the maximum number of values to return",
          "_queryId": "the unique id of the data query",
          "_timestamp": "the timestamp before which to search for values"
        },
        "returns": {
          "_timestamps": "the timestamps of the values retrieved",
          "_values": "the values retrieved, ordered from oldest to newest"
        }
      },
      "getNewValueCountbyQueryId(bytes32)": {
        "details": "Counts the number of values that have been submitted for the queryId",
        "params": {
          "_queryId": "the id to look up"
        },
        "returns": {
          "_0": "uint256 count of the number of values received for the queryId"
        }
      },
      "getReporterByTimestamp(bytes32,uint256)": {
        "details": "Returns the address of the reporter who submitted a value for a data ID at a specific time",
        "params": {
          "_queryId": "is ID of the specific data feed",
          "_timestamp": "is the timestamp to find a corresponding reporter for"
        },
        "returns": {
          "_0": "address of the reporter who reported the value for the data ID at the given timestamp"
        }
      },
      "getTimestampbyQueryIdandIndex(bytes32,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_queryId": "is the id to look up"
        },
        "returns": {
          "_0": "uint256 timestamp"
        }
      },
      "isInDispute(bytes32,uint256)": {
        "details": "Determines whether a value with a given queryId and timestamp has been disputed",
        "params": {
          "_queryId": "is the value id to look up",
          "_timestamp": "is the timestamp of the value to look up"
        },
        "returns": {
          "_0": "bool true if queryId/timestamp is under dispute"
        }
      },
      "retrieveData(bytes32,uint256)": {
        "details": "Retrieve value from oracle based on queryId/timestamp",
        "params": {
          "_queryId": "being requested",
          "_timestamp": "to retrieve data/value from"
        },
        "returns": {
          "_0": "bytes value for query/timestamp submitted"
        }
      },
      "setIdMappingContract(address)": {
        "details": "allows dev to set mapping contract for valueFor (EIP2362)",
        "params": {
          "_addy": "address of mapping contract"
        }
      },
      "valueFor(bytes32)": {
        "details": "Retrieve most recent int256 value from oracle based on queryId",
        "params": {
          "_id": "being requested"
        },
        "returns": {
          "_statusCode": "200 if value found, 404 if not found",
          "_timestamp": "timestamp of most recent value",
          "_value": "most recent value submitted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3452,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "tellor",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITellor)5193"
      },
      {
        "astId": 3455,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "idMappingContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMappingContract)4198"
      },
      {
        "astId": 1013,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "krabzTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1015,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "deployer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1018,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "FILECOIN_CHAIN_ID",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1021,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "POLYGON_CHAIN_ID",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1024,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "topUpWalletPath",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1027,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "buyTicketPath",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1030,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "newRoundPath",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1033,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "setRandomWinnersPath",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1036,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "claimWinningsPath",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1039,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "withdrawFromWalletPath",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1041,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "currentRound",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1044,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "MAX_TICKET_PER_ROUND",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1047,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "PREDICTABLE_VALUE",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1050,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "filecoinChain",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 1053,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "polygonChain",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 1055,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "filecoinDestinationAddr",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 1057,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "polygonDestinationAddr",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 1062,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "userDetails_",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(User)1011_storage)"
      },
      {
        "astId": 1069,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "roundToticketId_",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Ticket)981_storage))"
      },
      {
        "astId": 1074,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "roundIdToRoundDetails_",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(Round)1001_storage)"
      },
      {
        "astId": 1080,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "ticketsPurchasedPerRound_",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1086,
        "contract": "contracts/MrKrabz.sol:MrKrabz",
        "label": "roundIdToTicketList_",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_array(t_struct(Ticket)981_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Ticket)981_storage)dyn_storage": {
        "base": "t_struct(Ticket)981_storage",
        "encoding": "dynamic_array",
        "label": "struct MrKrabz.Ticket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMappingContract)4198": {
        "encoding": "inplace",
        "label": "contract IMappingContract",
        "numberOfBytes": "20"
      },
      "t_contract(ITellor)5193": {
        "encoding": "inplace",
        "label": "contract ITellor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)1011_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MrKrabz.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1011_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Ticket)981_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MrKrabz.Ticket[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Ticket)981_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Ticket)981_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct MrKrabz.Ticket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Ticket)981_storage)"
      },
      "t_mapping(t_uint256,t_struct(Round)1001_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MrKrabz.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)1001_storage"
      },
      "t_mapping(t_uint256,t_struct(Ticket)981_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MrKrabz.Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)981_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CrossChainBalance)968_storage": {
        "encoding": "inplace",
        "label": "struct MrKrabz.CrossChainBalance",
        "members": [
          {
            "astId": 963,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "fil",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 965,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "matic",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 967,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "krabz",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Round)1001_storage": {
        "encoding": "inplace",
        "label": "struct MrKrabz.Round",
        "members": [
          {
            "astId": 983,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "roundName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 985,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "roundId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 987,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "ticketsPurchased",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "roundEndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 991,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 995,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "roundWinningNumbers",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 997,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "roundState",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 1000,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "balance",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(CrossChainBalance)968_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Ticket)981_storage": {
        "encoding": "inplace",
        "label": "struct MrKrabz.Ticket",
        "members": [
          {
            "astId": 970,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 972,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "ID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 976,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "selectedNumbers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 978,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "withdrawn",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 980,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "originChain",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(User)1011_storage": {
        "encoding": "inplace",
        "label": "struct MrKrabz.User",
        "members": [
          {
            "astId": 1003,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1005,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "totalTicketsPurchased",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1007,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "totalWinnings",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1010,
            "contract": "contracts/MrKrabz.sol:MrKrabz",
            "label": "balance",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(CrossChainBalance)968_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}